%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Supply_Demand.pdf
%%Creator: Adobe Acrobat 10.1.5
%%For: carleejw
%%CreationDate: 1/20/13, 2:58 AM
%%BoundingBox: 0 0 724 412
%%HiResBoundingBox: 0 0 724 412
%%CropBox: 0 0 724 412
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 551 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2013-01-20T07:58:24Z"
   xmp:ModifyDate="2013-01-20T07:58:24Z"
   pdf:Producer="Mac OS X 10.6.8 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -412 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 412 li
724 412 li
724 0 li
cp
clp
gsave
0 412 mo
724 412 li
724 0 li
0 0 li
0 412 li
clp
724 412 mo
0 412 li
0 0 li
724 0 li
724 412 li
false sop
0 0 0 0 cmyk
f
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
538.434 174.781 mo
538.434 33.2036 li
0 0 0 1 cmyk
@
538.434 31.219 mo
534.071 38.6997 li
533.792 39.1768 533.953 39.7891 534.43 40.0674 cv
534.908 40.3457 535.52 40.1845 535.798 39.7075 cv
538.434 35.1883 li
541.071 39.7075 li
541.349 40.1845 541.961 40.3457 542.438 40.0674 cv
542.915 39.7891 543.076 39.1768 542.798 38.6997 cv
cp
ef
539.238 174.094 mo
713.44 174.094 li
@
715.425 174.094 mo
707.944 178.458 li
707.467 178.736 706.855 178.575 706.577 178.098 cv
706.298 177.621 706.46 177.009 706.937 176.73 cv
711.456 174.094 li
706.937 171.458 li
706.46 171.18 706.298 170.567 706.577 170.09 cv
706.855 169.613 707.467 169.452 707.944 169.73 cv
cp
ef
539.238 173.955 mo
562.034 127.243 584.83 80.5307 608.726 80.3555 cv
632.622 80.1802 682.613 172.904 682.613 172.904 cv
.661891 .339849 .0294499 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: BCAQMX+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /BCAQMX+ArialMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006546670
676d00000000000007100000066e676c79660000000000001ad000003c2a
686561640000000000000d8000000036686865610000000000000db80000
0024686d74780000000000000ddc000000a06c6f63610000000000000e7c
000000526d6178700000000000000ed0000000206e616d65000000000000
0ef000000020707265700000000000000f1000000bbe6764697200000000
000000000000000005ba001905ba001a05a70019042600180000ffe70000
ffe80000ffe7fe69ffe805ba0019fe69ffe802ea000000b8000000b80000
000000a800ad016900ad00bf00c201f0001800af00b900b400c800170044
009c007c009400870006005a00c80089005200520005004400940119ffb4
002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c
006e00700180ff58ff8eff92ffa400a500b903c8fffd000b001a00630063
00cdffee05d8ffdc002d005c0095009900df019209b500400057008000b9
039d0072009a035d0401ff67fffa00030021007700cd0004004d00cd01c0
022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068
009a00ba013501470221055cff4dffcd0016002d00780080009900b200b6
00b600b800bd00da010c05f0ffa4fff00019002c0049007f00b400ce01c0
03fefd81fe3f000000050018002900390049006f00be00c700d0012301c1
026f050c05320540057affd4001400310055005700a700b400e601f7027e
027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f
01560229026f029e03720008002c00310031006400690089009800c700de
012b01b6020c02cf03a304ab04fb061dfee0ff0e00060026009b009d00c1
010d011801200173018201d601e30243025f029b02e2039404a904d20761
001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd04420442045304730483
0586058b06e8fe58fec4fed1fef7ff32ff860051007c008100910095009e
00b400b900cf00d900d900df00e20105010b010e010e012001210155017b
017b017e018d01a201a801a901b401d001d001e201e901f201f501fb0200
02000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a
04cf04ff053205320596059f05a805ab05c205f0060c0782080008ccfca3
fd2afddefe00fe88fe96feb2feb4ffe100150019001a001c001f003c0051
00610061006a0078009600a500af00d3010c0118011a012a013e014c0151
015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef
0200020d021c02210222022e02350242024f024f025e0265027102900292
02b402d602fa0307030b030f0315032a0347035d036503740379039603b0
03cc03dd03e203f603fc03fc03ff040a041f04220426042b0447045f0475
049e04e704e7055c05cb05e5060a066d068606b806f10736073e07500751
075d078f07b607d4086000b600c300b500b7000000000000000000000000
01e00381034503b5008e0233041902ce02ce002d005f0064034d023f0000
02a80188027d01b402240578063b023b014e00f00426029402c6029f02f6
023b034d014b0153006a0231000000000000061404aa0000003c04c300ed
04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e
05580021039c00ae0371017d00b5024500000afb088c012b014e01aa0087
0054013201f803ff0003024e00b4003703e30083006b02d800ed00770088
009701640467008e0033017c00e700a6029e0329056e062a061501c90269
048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d0086
0071ff810079055804d2016700030156002504e00094007c033204210094
007f0072005c002f00b6001800ba00b80041034d00720018001f004c016a
01550099009a009a009800b200040078006900140057006e00ce00b40654
02b80067050e016500e7000004cbfe52005affa60099ff67006eff92002d
ffd40087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c
054602cf0546ff2d028a02d90253029600b7000000000000000000000000
00000125011800ea00ea00ae0000003e05bb008a04d70053003fff8cffd5
00150028002200990062004a00e4006d00ee00e5004803c00033fe4e02b1
ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061
072b00ed04b001d200b6007b00650252ff740365fe690094008f005c0040
00860075008900894043555441403f3e3d3c3b3a3938373534333231302f
2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514131211
100f0e0d0c0b0a090807060504030201002c4523466020b02660b0042623
48482d2c452346236120b02661b004262348482d2c45234660b0206120b0
4660b004262348482d2c4523462361b0206020b02661b02061b004262348
482d2c45234660b0406120b06660b004262348482d2c4523462361b04060
20b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd44
2320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a45
60442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370
b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b01923
442d2c2045b00325456164b050515845441b2121592d2cb00143632362b0
002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069
b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d
2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0124358
8745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0a0
5158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212121592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8022323701020b8
02234520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b01243
5c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164b8
07085158b00425b00425012046b01060482046b0106048590a21211b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b53
234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c
4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b54
5a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549b00425
b00425496120b0005458212043b0005558b00325b00325b8ffc038b8ffc0
38591bb04054582043b0005458b00225b8ffc038591b2043b0005458b003
25b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121212d2c
462346608a8a462320468a608a61b8ff8062232010238ab902c202c28a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b94000020063b80400885458b2024002
43604259595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d00000001000000050f5c93baa7385f0f3cf5081b080000000000
a2e3272a00000000c59b6257faaffd671000080c00000009000100000000
000000010000073efe4e00431000faaffa7a100000010000000000000000
0000000000000028060001000239000002aa007c02aa007c031d004004ac
0072023900aa02aa0041047300df04ac00720556fffd05c7009e06aa0098
05c7009c0556009e0556005c05c700a1078d00190473004a047300860400
0050047300460473004b023900130473008701c7008801c7008306aa0087
04730087047300440473008702aa00850400003f023900240473008305c7
00060400000f04000021040000280473fffc000000150015005500a80118
014c018801ab02190251032603ca055f063406b7080c089e09bd0b260c15
0cef0dc90ea80f521024109e111c1234131713f814da155d173117c31892
1ac71bd91d051df91e15000000010000002800f2003c009d000700020010
002f0056000004ac041d000500020000000100120001000000000006000e
00005546545148412b417269616c4d54b900540328b326181fd0bc032900
e0032900020329b22b1d1fb90327031db23b1f40b80323b31215320f412d
03200001002f0320000100200320006f032000af032000bf03200004005f
031e00010010031e007f031e0080031e00af031e00bf031e00d0031e0006
0000031e0010031e0020031e006f031e009f031e00e0031e0006031d031c
b2201f1041270319007f03190002000f031700ef031700ff03170003001f
0317002f0317004f0317005f0317008f0317009f03170006000f0317005f
0317006f0317007f031700bf031700f00317000600400317b2923340b803
17b28b3340b80317b36a6c3240b80317b2613340b80317b35c5d3240b803
17b357593240b80317b34d513240b80317b344493240b80317b23a3340b8
0317b331343240b80317b32e423240b80317b3272c3240b80317b3122532
80b80317b30a0d32c04116031600d00316000200700316000102c4000f01
01001f00a0031500b0031500020306000f0101001f00400312b32426329f
bf03040001030203010064001fffc00301b20d1132410a02ff02ef001200
1f02ee02ed0064001fffc002edb30e11329f414a02e200af02e200bf02e2
000302e202e202e102e1007f02e00001001002e0003f02e0009f02e000bf
02e000cf02e000ef02e0000602e002e002df02df02de02de000f02dd002f
02dd003f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd02dd0010
02dc0001000002dc0001001002dc003f02dc000202dc02dc001002db0001
02db02db000f02da000102da02daffc002d3b2373932b9ffc002d3b22b2f
32b9ffc002d3b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802
d2b2f9291fb90326031cb23b1f40bb0322003e00330322b225311fb80318
b23c691fb802e3b3202b1fa0413002d400b002d40002000002d4001002d4
002002d4005002d4006002d4007002d40006006002d6007002d6008002d6
009002d600a002d600b002d60006000002d6001002d6002002ca002002cc
002002d6003002d6004002d6005002d6000802d0b2202b1fb802cfb22642
1f411602ce02c70017001f02cd02c80017001f02cc02c60017001f02cb02
c50017001f02c902c5001e001f02ca02c6b21e1f00410b02c6000002c700
1002c6001002c7002f02c5000502c1b324121fff411102bf0001001f02bf
002f02bf003f02bf004f02bf005f02bf008f02bf000602bf0222b2641f12
410b02bb00ca0800001f02b200e90800001f02a600a20800406a1f402643
4932402043493240263a3d3240203a3d329f209f26024026969932402096
993240268e923240208e92324026848c324020848c3240267a813240207a
813240266c763240206c76324026646a324020646a3240265a5f3240205a
5f3240264f543240204f5432b8029eb724271f374f6b0120410f02770030
02770040027700500277000402770277027700f90400001f029bb22a2a1f
b8029a402b292a1f80ba0180bc0180520180a201806501807e0180810180
3c01805e01802b01801c01801e0180400180bb0138000100800140b40180
400180bb013800010080013940180180ca0180ad01807301802601802501
8024018020013740b80221b2493340b80221b2453340b80221b341423240
b80221b33d3e320f410f0221003f0221007f0221000300bf022100cf0221
00ff0221000300400221b320223240b80221b3191e3240b80222b32a3f32
40b80221b32e3a326f414802c3007f02c3008f02c300df02c30004002f02
c3006002c300cf02c30003000f02c3003f02c3005f02c300c002c300ef02
c300ff02c3000600df02220001008f02220001000f0222002f0222003f02
22005f0222007f022200ef0222000600bf022100ef02210002006f022100
7f022100af02210003002f0221003f0221004f0221000302c302c3022202
2202210221401d101c102b1048038f1c010f1e014f1eff1e023700161600
000012110811b8010db6f70df8f70d00094109028e028f001d001f029002
8f001d001f028fb2f91d1fb80198b226bb1f41150197001e0401001f0139
00260125001f013800730401001f0135001c0801001f0134001c02ab001f
0132b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb802
01b61fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801
b21fbc26b80101b21fba20b80201b61fb91c381fadcab80401b21f8126b8
019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e
73b80401400f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f
3c26b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f29
1cb80101b21f231eb80401b21f5537b80168402c07960758074f07360732
072c0721071f071d071b071408120810080e080c080a0808080608040802
08000814b8ffe0402b000001001406100000010006040000010004100000
01001002000001000200000001000002010802004a00b013034b024b5342
014bb0c063004b6220b0f65323b8010a515ab005234201b0124b004b5442
b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb00288b801
005458b801ffb101018e851bb0124358b900010111858d1bb90001012885
8d5959001816763f183f123e113946443e113946443e113946443e113946
443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b
2b2b2b2b2b2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb093
53205c58b901f201f04544b901f101f045445958b9033e01f2455258b901
f2033e4459594bb8015653205c58b9002001f14544b9002601f145445958
b9081e0020455258b90020081e4459594bb8019a53205c58b9002501f245
44b9002401f245445958b909090025455258b9002509094459594bb80401
53205c58b173244544b1242445445958b917200073455258b90073172044
59594bb8040153205c58b1ca254544b1252545445958b9168000ca455258
b900ca16804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a
001c455258b9001c011a4459594bb05653205c58b11c1c4544b12f1c4544
5958b90189001c455258b9001c01894459594bb8030153205c58b11c1c45
44b11c1c45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b65422b2b01b33b59635c456523456023456560234560b08b76
6818b080622020b163594565234520b003266062636820b003266165b059
236544b063234420b13b5c4565234520b003266062636820b003266165b0
5c236544b03b2344b1005c455458b15c406544b23b403b4523614459b347
503437456523456023456560234560b089766818b080622020b134504565
234520b003266062636820b003266165b050236544b034234420b1473745
65234520b003266062636820b003266165b037236544b0472344b1003745
5458b137406544b24740474523614459004b5342014b5058b10800425943
5c58b108004259b3020b0a124358601b2159421610703eb0124358b93b21
187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411b
ba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8
0400000b2b59b0102342b0112342002b7475737500184569444569444569
447373737374757374752b2b2b2b74752b2b2b2b2b737373737373737373
737373737373737373737373737373732b2b2b45b0406144737400004bb0
2a534bb03f515a58b1070745b040604459004bb03a534bb03f515a58b10b
0b45b8ffc0604459004bb02e534bb03a515a58b1030345b040604459004b
b02e534bb03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400
735903b01e4b5402b0124b545ab012435c5a58ba009f0222000100735900
2b7473012b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b
2b0045694473456944734569447374754569447345694445694445694473
74456944456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b
2b2b2b2b2b737475732b7374757374752b2b2b742b2b000000>
[15403 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> BCAQMX+ArialMT AddT42Char 
1 3176 14 <0002009e000004fd05ba000d001800b2402c65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e02010200081226080a0d0d025508100b0b06
5508b8fff4401b0c0c0655081a201a01201a011a180d2001200001002010
10025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c02
55000c0b0b065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b
5c182b10f62b2b2b2b2b2b2b5d3cfd3c4e10715df62b2b2b4ded003f3f3c
fd3c12392f3cfd3c3130015d005d33112132171e02151402212111112132
36353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c3184fe
8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>BCAQMX+ArialMT AddT42Char 
1 7504 23 <000100130000028005d30017010d401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040281a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff134004172504000302920101
00b8ffc0b331383400b8ffc0402b1c1f3490000119400f0f025519400d0e
025500141010025500280f0f025500220e0e0255002c0d0d025500b8fff2
400b0c0c025500140b0b065500b8ffeab41010065500b8ffe6b40f0f0655
00b8fffab70c0c065500a31819bc01ba002100f6010a00182b2bf62b2b2b
2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced10eded5d003f3f3c3c3cfd3c
3fed391139313043794014101106090706080602061009121b0011060f1b
012b012b2a8181012b715d00723311233533353437363633321707262322
06151533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b3446
57129d0a4660628cfc66>BCAQMX+ArialMT AddT42Char 
1 8264 25 <000200880000013c05ba0003000700cd405e09360b0b02554f099009a009
b009c009df09f0090700091f09700980099f09b009c009df09e009ff090a
1f09010001070402030906037e0100060506040a0607250500049f04a004
b004c004e00406c004f0040200042004d004e0040404b8fff8b410100255
04b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b065504b8
ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e0847
50182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed0111123939
111239393130015d72712b133533150311331188b4b4b404ebcfcffb1504
26fbda00>BCAQMX+ArialMT AddT42Char 
1 9774 29 <00020044ffe80427043e000d0019016bb615180d0d065513b8ffe8b40d0d
06550fb8ffe840730d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14241b400d0d02551b400b0b
025507b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b
0b065507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c0655
07b8ffc04013242534300701000710072007030731df1b011bb8ffc04049
1e2334301b011b0e24000c0e0f025500120d0d0255000c0c0c0255001c0b
0b0255000e0b0b0655000e0d0d0655000c1010065500160c0c0655004024
25341f003f000200311a3437182b10f65d2b2b2b2b2b2b2b2b2bed10712b
5df65d5d2b2b2b2b2b2b2b2b2b2bed003fed3fed313001715d0071435c58
4009530553096205620904015d59002b2b2b2b1310373633320015140606
23220013141633323635342623220644a489c5db01167beb8bdffeedb9b2
8786b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca
>BCAQMX+ArialMT AddT42Char 
1 10676 31 <00010085000002c6043e001100c9403b2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
900801082220130113022211250100b8ffc04010333634f0000100002000
d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c0255
00060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c06
5500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfde4
105df472e4003f3f3fed11393911393901111239390010c9870e7dc43130
005d72015d33113315363633321707262322060706151185a23e693f5b5e
3e42423b5e141e0426a171483aa727473f6072fdd400>BCAQMX+ArialMT AddT42Char 
1 11874 33 <00010024fff2022a0599001700d8b9000affc0b323263409b8ffc0404123
263480190100010c0d0a0103001610092b0f0a06161c030b0f1022002201
0d12250c01ff070845094560077007800790070400072007a007b007c007
d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e0e0255
07b8fff8b40d0d025507b8fff8b40c0c025507b8fffab41010065507b8ff
f0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00180136
b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd3c10e4f43c003f
ed3f3cfd3c1139123911333310c93130015d2b2b25170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>BCAQMX+ArialMT AddT42Char 
1 13710 36 <0001000f000003f10426001001dcb1020243545840150f010b0604020906
02060d0a000a0f180f0f02550f2f2b003f3f3f3f11173931301bb70f1201
0f22193906b8ffde405019395a0f96049608990e9a0fc005c006c007cb0f
090f4016391a031309150d1a1035013a0b81018e0b082f1257045907590b
580e9701980a980bb702b80cc80bca0ecc10da03d509d10ddb10e50a1212
b10602435458400b0c0012110f180d10065506b8ffe8400e0d1006550f06
00020d000a0a0206003f3c3f3c111239392b2b01111239391b4066060603
0708090901060609050403030b0f0f100e0d0d010f0f0d100b010009020d
0b030c100a060f020f0a10c600c60902102500091400000903020dc60d01
0d250c03140c0c030a090903030206100d0d0c0c000a4f120112490d7e0c
220a0f6106097e400ab8011bb74006500680060306b80243400e20037e02
224f00010049117cc4182b10f65df4ed1a19fd5dfd1a18ed10e510f4ede6
5d003f3c103c103c3f3c103c103c87052e2b5d877dc4872e182b5d7d10c4
00111239390f0f8708c4870e10c408c4870e10c4c408c4070e103c3c083c
59313001435c58b40e181d390bb8ffde400b1d390c221739032217390bb8
ffdeb2213910b8ffc0400a15390122213909401c392b2b2b2b2b2b2b2b59
5d71002b5d2b2b015d5933010133171617363737330101230327010f0184
fe99e1a32e1c2c25b3d7fe91018bddda3afee9022801fef947304233fbfe
0cfdce014a59fe5d>BCAQMX+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>BCAQMX+ArialMT AddT42Char 
BCAQMX+ArialMT /CharStrings get begin
/space 1 def
/P 14 def
/f 23 def
/i 25 def
/o 29 def
/r 31 def
/t 33 def
/x 36 def
end
BCAQMX+ArialMT /Encoding get
dup 32 /space put
dup 80 /P put
dup 102 /f put
dup 105 /i put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 120 /x put
pop
end
%ADOEndSubsetFont
/GSVBDY+ArialMT /BCAQMX+ArialMT findfont ct_VMDictPut/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 47{/.notdef}rp /P 21{/.notdef}rp /f 2{/.notdef}rp /i 5{/.notdef}rp /o 2{/.notdef}rp /r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [0 -12 -12 0 0 0 ]msf532.612 72.6264 mo(Profit )[-8.00409 -3.99591 -6.6744 -3.3336 -2.6664 -3.3336 0 ]yshGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf695.165 183.955 mo(x )[6 0 ]xsh[6 2 ] 0 dsh
608.726 80.3556 mo
609.813 174.781 li
@
%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 42 2 <0001007cfe51026005d30010003d400a270f0100101207081010b80133b3
009f0e08b801334011079f0e5e0003100320030303ac119d8c182b10f65d
fdf6ed10f6ed003f3c3f3c3130015d012602113437363733060706070615
100101df95ce4d5abc8179273d232b012bfe51bc01f8010eeedafdfbd059
8a96bbbdfe1ffe20>GSVBDY+ArialMT AddT42Char 
1 170 3 <0001007cfe51026005d300100065400c2802281002090a1001001209b801
33b30a9f0301b80133b4009f035e0eb8fff0b4101002550eb8fff8b40f0f
02550eb8ffe4b40d0d02550eb8ffec400f0a0a02550f0e1f0e020eac129d
8c182b10f65d2b2b2b2bfdf6ed10f6ed003f3c3f3c3130015d1323001134
272627262733161716151002fd81012b2b223d277a81bc5a4dcffe5101e0
01e1bcb9968a5ad2fbfddaeefef2fe08>GSVBDY+ArialMT AddT42Char 
1 336 4 <00010040036302d505d300180086404a0b010b0a1b011b0a040a090c0e0f
101107060b01021816151413070004030817120d07070605181716151312
11100f0d0c0b1404070308010a06050b00001020140114bf0605000ba506
b80195400d05a50040111334001919708c182b4e10f42b4df4fde4003f3c
fd5d3c392f3c1217391217390111121739121739111217393130005d1337
1617262733060736371706071617072627060727363726402e9f48130191
031467852e7f7a3d6f783a4f4a387674328104ad8e3829b5446395342c8e
2a0e3588554f888d4a558f2e1900>GSVBDY+ArialMT AddT42Char 
1 1074 9 <0002007201a1043a04060003000700474027050601040709002503012503
020725040406253002019f02cf020202bf05001a09011908575a182b4e10
e410e6002f4ded5d71ed3c10ed103ced10ed011139391139393130012135
2111213521043afc3803c8fc3803c8035ea8fd9ba800>GSVBDY+ArialMT AddT42Char 
1 1940 12 <000100980000060f05ba001002e4b10202435458b90008fff6400b0c0c02
55080e0d11025502b8ffeeb40d11025505b8ffee40280d1102550c120c0c
0255050f0c030900010208090b0e000809020a0b06101002550b100d0d02
550bb8fffab60c0c02550b1000b8ffe6b41010025500b8fff8b40f0f0255
00b8fffcb40d0d0255002f2b2b2bcd2f2b2b2bcd003f3fc0c010d0d0c011
1217392b2b3130012b2b2b001bb10602435458401f07200b0b065506200b
0b065503200b0b065504200b0b065505200b0b065508b8fff240230b0b06
55020c0b0b065503060c0c0655020e0c0c0655090c0c0c06550a0c0c0c06
5507b8fff8b40d0d065508b8fff8401f0d0d06552605010c200a12340f20
0a12340f050c0300010e0b00080801020ab8ffeeb40b0b06550ab8ffeeb4
0c0c06550abb0256001200100256400d000c0b0b065500060c0c065500b8
fff8b40d0d065500012f2b2b2bf42ff42b2b003f3c3f3c3c111217392b2b
5d3130012b2b2b2b2b2b2b2b002b2b2b2b2b1b407f00020f0814021b0804
760c860cc80c03090c490c490f032904250d2c0e58035b04760d780e870d
080b020508390d360e4f024b03440740084d0d420e0a9802990396079608
a803a7070612020f0e0e30050214050502080c0d0d300508140505080c52
0f5201400102020808090a0b0b0d0d0e0e1000080902601280120212ba02
a8000d0131b2052008b80131400a0c090a20400c7f0b010bba0256000e01
0bb2052002b8010b40090f0100200f70100110b80256b720056005800503
05b802a8b3113b59182b1910f45df45d3c18fd3c10ed1a1910edf45d3c1a
18fd3c10ed1a1910ede45d00183f3f3c3c103c103c103c103c103c103c1a
10eded87052e2b877dc4872e182b877dc43130004bb00b534bb01e515a58
bd000cfffb0008ffd60002ffd638383859014bb00c534bb028515a58b900
0dfff8b10e0a38385901435c58b9000dffd4b621390e2c21390db8ffd4b6
37390e3237390db8ffd4b52d390e2c2d392b2b2b2b2b2b5972715d00715d
015d59593311210116173637012111231101230111980124015b30161935
015f0105bbfe56affe5805bafbf29148509b03fcfa4604cbfb3504e0fb20
>GSVBDY+ArialMT AddT42Char 
1 3438 15 <0001005cffe704eb05d30030021540276303630473037404042527350339
1c430349074c1d451f44244627530359075c1d572889130e23b8fff2b410
10025524b8fff2b41010025525b8fff2b41010025526b8fff2b410100255
27b8fff2b41010025523b8fff6b40d10025524b8fff6b40d10025525b8ff
f6b40d10025526b8fff6b40d10025527b8fff640460d100255280d262402
24032725360f34234425452f5a20562355256c0b6a0d6b0e66146518790b
7a0d7a0f7d107524732586038a0b890d8a0f8d1085248325920d960f9615
1eb10602435458402d2126121b261a09262901260000291a120432312600
650002000d2d791b891b021b25160d2d1e27250125051605b8fff4400c0c
0c0655051e2d091e1e1603003fed3fed2b1112395d1112391112395d1112
395d01111217392fed2fed2fed2fed1b402d25240e0d0b05211c1d1e1b08
070604030206012524220e0d0b06051e1b2d1a400c0c02558f1a011aed16
002d01b8ffc040120c0c02551001200150016001700190010601b801b040
132d1e1e1603051e2d091b261a4a092600290129b8ffeab40e0e025529b8
fff4400d0c0c0255291a32212612012612b8ffecb40e0e025512b8fff6b4
0d0d025512b8fff8400f0c0c02551254200001001931635b182b4e10f45d
4de42b2b2bed10ed4e10f62b2b5d4dedf4ed003fed3fed10fd5d2be410fd
5d2bf4111217391117391112393901121739593130005d712b2b2b2b2b2b
2b2b2b2b015d7113371e0233323636353426272624272626353436363332
161617072626232206151417160417161615140606232224265cb70d5fc8
7d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958
807a86fb9dc7fef39901d7106e8d5742734445672317612b37a3656fc164
69cc810e8b8e815b4f33336b283bb57675cf7374e900>GSVBDY+ArialMT AddT42Char 
1 4986 18 <0002004affe8041c043e00280037022d402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe040550c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030e0c0f0f
02550eb8ffeab4101002550eb8fff44015101006550e0c0d0d06550e060f
0f06550e0e1c0317b802aab61895141c1c0700b8fff4401a0c0c06550045
270a321c030b2961106100060d0d025500252124b8ffecb41010025524b8
ffec400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b
065524b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b802
5b400e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b6
0e0e0255263139b8ffc0400d1e23343039c03902a039013917b8fff44041
10100655172518222f24bf06cf06021f063f0602060e0f0f0255060c0d0d
025506180c0c0255060c0b0b0255060c0b0b0655060e0d0d065506100c0c
065506313810f62b2b2b2b2b2b2b5d71edf4ed2b105d712bf62b2b5dedf4
2b2b2b2b2b2b2b2b3cfd2be5e5003fed3fe42b3fedfde41112392f2b2b2b
2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d2b
2b0071250606232226353436363736373637363534272623220607273e02
333216161716151514161723260306070e02151416333236373635033c64
b96aafbc477348356bda67013345887f791db0186ed08988aa5010091722
bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24250a6e
2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48605b4f
3d77>GSVBDY+ArialMT AddT42Char 
1 6186 20 <00010050ffe803ed043e001a015ab1020243545840340e7f0f010f0b0140
0050007000030004121c0b07181c040b010e1507080e0e0255070c0d0d02
55070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10c45d
3210c45d3231301b4047090c011f1c4313431753135317601360179b029b
039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509b60a
b50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa407930004000
5000600070009000a000e000f00009000f0f0b000004121c0b07181c040b
1c0f010f240e080d0d06550e221b000100240b2b1f010100010101400b0b
065501401010065501480c0c0655011a0d0d065501491c1524cf07011f07
3f0702070e0b0b0655070a1010065507120c0c065507311b34c4182b10f6
2b2b2b5d71ed10f62b2b2b2b5d724b53234b515a58b90001ffc03859ed72
f42bed72003fed3fed12392f11392f105de4105de43130005d71015d7159
011706062322001134123633321617072626232206151416333236033cb1
1defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf011d01
0aac010281afa11b6b6cc3d3d6c28200>GSVBDY+ArialMT AddT42Char 
1 7058 22 <0002004bffe8041e043e0015001d015340171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc04010101006551001010195131c040b17400db8ffdcb40d0d02550d
b8ffeeb40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d
1a1fb8ffc0b32526341fb8ffc040411e2334301f011f163310240740242a
341f073f074f070307200b0b025507180c0c0255071c0d0d0255070e0b0b
0655071c0c0c065507160d0d065507191e3437182b4e10f42b2b2b2b2b2b
5d2b4dfde44e10712b2bf6712b2b2b2b4ded003fedfd5d2b2be43fed1239
2f5d3cfd713c011112393912393130015d005d2b2b2b0171720117060623
22001110003332001114072116163332360121262726232206035eba2cee
b9e9feef0114dcd5010e01fce80ab285638cfdda02510c3856897ca90156
17a3b4011f0103010c0128fedefef91020afba680195864368a6>GSVBDY+ArialMT AddT42Char 
1 8760 27 <0001008700000626043e002301c7b9000dfff4b40d0d065508b8fff4b40d
0d065509b8ffd8404d0b0d342504e404e409e117e52005d505f620021708
202309181b20090303231e1c06151c0b0b06070106231a19100ad0250190
25a025022517171a0e2590110111041010025511180f0f025511b8ffec40
0b0e0e025511140c0c025511b8ffe840170b0b025511020b0b0655110c10
10065511060f0f065511b8fffab40c0c065511b8fff8b40d0d065511b801
5d400c1825901b011b180f0f02551bb8ffec400b0e0e02551b140c0c0255
1bb8ffee40110b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d
06551b0c0f0f06551bb8fffcb40c0c06551bb8015d4016000233232501d0
00019000a000021f003f004f000300b8fffe401d0e0e025500100d0d0255
00100c0c0255000c0b0b025500160b0b065500b8fffcb41010065500b8ff
f440140f0f0655000a0c0c0655000e0d0d065500192425b80178b3214750
182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c4dfde410f42b2b2b2b2b2b2b
2b2b5dedf42b2b2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f
3f3c4d10ed10ed11173901111239123931304379400e0c141326140c111b
01120d151b01002b012b2b81015d005d2b2b2b3311331536363332161736
3332161511231134262623220615112311342623220606151187a132a66a
76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258baafb6fd
27029d6c5f3a95a4fd9702b27878509a91fdd900>GSVBDY+ArialMT AddT42Char 
1 10224 30 <00020087fe690421043e0012001e0162408e0c102d103d104b10043f20b0
20021f20290c231d3215321d421d70209020083a173a1b4a174a1b59085b
0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee414e41ee0
20ff201623042b102b1535043a1046044a105a10e50beb1dfe100b110e03
161c1c06070106161c0e0b000e1924d00a01100a400a600a800a0420400b
0b025520400d0d02550ab8ffe6400b0f0f02550a180d0d02550ab8fffab4
0c0c02550ab8ffeeb40b0b06550ab8fff4b40f0f06550ab8ffe840230c0c
06550a74011333023312250000c001019001a001b001f001041f013f014f
010301b8fffc401d0e0e025501100d0d025501100c0c025501100b0b0255
010c0b0b065501b8fff6b41010065501b8fffc40160f0f0655010c0c0c06
5501120d0d065501191f473718012b4e10f42b2b2b2b2b2b2b2b2b5d7172
3c4d10fdf4e410fd2b2b2b2b2b2b2b2b5d71ed003f3fed3f3fed11391239
3130005d015d717200711311331536363332161615140206232226271103
141633323635342623220687a43a926888d06a75df7b5a8f2e11a67678ab
a77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbca
d700>GSVBDY+ArialMT AddT42Char 
1 14858 38 <00010028000003d40426000e01af400d12b802c9080212013212173408b8
ffce4009121734013e1e213408b8ffc2404a1e2134290228092f10390139
0a49014602460849094f105c01540254085a0950106c01630263086a097b
0174087b098b0185088909f901f4021b1908260129082b093908a508d701
0710b8ffc0b7101534022c123909b8ffd44023123901023a090a02080a0a
25010214010102010d0e08060261052b0706060a610d000db8fff440090b
0b06550d2b0e0a02b8010fb40808070506bb025b00000007fff440160b0b
065507220da00e01000e400e600e800ef00e050eb8fff440240b0b06550e
74000a7e0101af00014f006f00ff000300180b0b065500190f1074217cc4
182b2b4ef42b5d713c4d10ed10fd2b5d713ce42b10f43c103c10fd003fed
2b3c10e53f3cfde5113911123987052e2b877dc4100ec42b3130012b2b2b
715d002b2b2b2b435c58b5290126080201b8ffce40091217340832121734
01b8ffc2b71e2134083e1e2134002b2b2b2b017159015d435c58b90008ff
deb20f3909b8ffdeb20f3909b8ffe8b71b390908161b3d09b8fff0b21739
09b8fff8400a163902141639021a16392b2b2b2b2b2b2b2b593335010623
213521150107363321152802a47358fe4f0364fdc16f796a01eb92030806
9277fd5e7b099b00>GSVBDY+ArialMT AddT42Char 
1 15346 39 <0001fffc01ca046f025b0003001e400f013500021a05200001001904b37a
182b4e10e45d10e6002f4ded31300335211504047301ca919100>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/parenleft 2 def
/parenright 3 def
/asterisk 4 def
/equal 9 def
/M 12 def
/S 15 def
/a 18 def
/c 20 def
/e 22 def
/m 27 def
/p 30 def
/z 38 def
/endash 39 def
end
GSVBDY+ArialMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 61 /equal put
dup 77 /M put
dup 83 /S put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 109 /m put
dup 112 /p put
dup 122 /z put
dup 208 /endash put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk 18{/.notdef}rp /equal 15{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /.notdef /o /p /.notdef /r /.notdef /t 3{/.notdef}rp /x /.notdef /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [14 0 0 -14 0 0 ]msf574.856 187.555 mo(S\(p\) = x*\(p\) )[9.33813 4.66187 7.7868 4.66193 3.88916 8.17603 3.88916 7 5.44891 4.66193 7.7868 4.66187 0 ]xshGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf621.921 64.5209 mo(Maximize profit )[9.99591 6.67444 6 2.66638 9.99591 2.66638 6 6.67444 3.33356 6.67444 3.99591 6.67438 3.33362 2.66638 3.33362 0 ]xsh639.259 78.5209 mo(px)[6.67444 0 ]xsh651.932 78.5209 mo( \320 c\(x\) )[3.33362 6.67438 3.33362 6 3.99591 6 3.99591 0 ]xsh1 lw
[4 3 ] 0 dsh
514.2 2.20004 mo
717 2.20004 li
717 211.648 li
514.2 211.648 li
cp
@
%ADOBeginSubsetFont: SMQAAA+Calibri-Bold Initial
ct_T42Dict begin
-0.516 -0.305 1.238 0.969
 256 array 0 1 255 {1 index exch /.notdef put} for  /SMQAAA+Calibri-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006086670
676d00000000000006c400000913676c7966000000000000268800001264
686561640000000000000fd8000000366868656100000000000010100000
0024686d74780000000000001034000000486c6f6361000000000000107c
000000266d61787000000000000010a4000000206e616d65000000000000
10c4000000287072657000000000000010ec0000159c6764697200000000
00000000000000000000079e0000fe930000000000000000000000810081
009c00ab00b500ba00c100ca00d300f3010a0060008500bf00e300ea00f2
00fb010001070115011c0129000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000fe83056d
000d03c0000600170000fffaffe9fea9ffe90000050e000600170000fffa
ffe9fe93050e00170426000600170000fffaffe9ff12ffed050e00170426
000600170000fffaffe9fe93feb8fece060b0010050e0006001002cbfffa
fff001edfffa023f00060010ff36fffafff00287000600100000fffafff0
079efeaffe9f00000000000000000000000000700072007500780079007a
007b007d007e007f008300860087008800890085007f0086008b008c008d
008e008f0090009100920093009400950096009700980099009a009b009c
009d009e009f009200930094009b009c009e009e00960099009a009d009e
00a200a600a900ac00a200a300a400a500a700a800a900aa00ab00ac00ae
00a300a500a700a800aa00ab00ac00ad00ae00a000a100a300a600a700a9
00aa00ac00ad00af00af00b000b100b200b300b400b500af00af00b000b2
00b300b400b500b800c000b600b700b800b900ba00bb00bc00bd00be00bf
00c000c100c200b900ba00bc00bd00bf00c000c100c200b600b700b800b9
00ba00bb00bc00bd00be00bf00c000c100c200c000c100c200c300c400c5
00c600c700c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c7
00c800c900ca00cb00cc00cd00ce00cf00c300c400c500c600c700c800c9
00ca00cb00cc00cd00ce00cf00c500c800c900ca00cb00ce00cf00d000d1
00d200d300d400d500d600d700d900db00de00df00e000e200e300ec00d0
00d100d200d300d400d500d600d700d800d900da00db00dd00de00df00e0
00e100e300e500e900ec00ed00d100d300d400d500d800d900da00dc00e0
00e100e800d000d100d400d600e000e4010800f5010200fb00ff0108008f
009000960092009300990090009100970098009a009d00a400a600a700a8
00a900af009a00a200a300a700a900aa00ab00ac00ad00b000ad009b00aa
00ab00ad00b0009a00aa00ac00ad00ae00af00b100b900bb00bc00bd00be
00c100c200c300c400c500c600c700c800c900ca00cb00ce00b300b400b5
00b600b700b800bc00c200c500c800ca00cb00cd00ce00cf00d000c700b7
00b800b900bb00bc00be00c600c700c800c900cb00cf00d000b200b600b7
00c200c400c500c600c700cb00cc00cd00ce00cf00d000d100d400d500d7
00d800d900da00db00dc00de00df00e000e200e300e500e600d100d300d6
00d700d800da00db00dc00dd00de00df00e000e100e200e300e400e500d1
00d200d400d500da00db00dd00de00df00e000e100e200e600d200d300d4
00d700d800dd00de00e000e100e200e300e400e500e600d200da00e100e9
00ea00ec00e800e900ea00eb00ec00ed00eb00e700ea00eb00ec00ed00e7
00e900ea00ec00ed00ee00ef00f500ee00ef00f000f100f200f300f400f5
00f600ee00f000f200ef00f000f100f200f300f400f500f600ee00ef00f0
00f100f200f300f400f500f600f700f700f800f900fa00fb00fc00fd00f7
00f800f900fa00fb00fd00f700f800f900fa00fb00fc00fd00fd00fe00ff
010001010102010300fe010001010102010300fe00ff0100010101020103
01020103010401050106010701080109010a010c010d010e010f01100107
010401050106010701080109010a010b010d010e010f0110011101040105
0106010701080109010a010b010c010d010e010f01100111010401050106
01070109010e010f011201130114011501170118011a011b011c011d011e
011f01210122011201130114011501170119011b011c011d011e01200121
0123012401250113011401150116011701180119011a011b011c011d011f
01200117011c011d011e012001210129013001770129012b012e012f0130
01310134013501370139012b012d013001320134013a012e01300134013a
014200500062006c00fa05e802cc0114011400a000b140465f5e5d5c5b5a
59585554535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a
39383736352f2e2d2c2826252423221f181411100f0d0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b0042651582320b00d44235921212d2c
20204518684420b001602045b04676688a4560442d2c01b10b0a43234365
0a2d2c00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228
453ab10200080d2d2c2045b00325456164b050515845441b2121592d2c20
45b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12c
c08a8cb8100062602b0c642364615c58b00361592d2c8a03458a8a87b011
2bb0292344b0297ae4182d2c4565b02c234445b02b23442d2c4b52584544
1b2121592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c
6423648bb84000622d2c21b08051580c6423648bb82000621bb200402f2b
59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59b00260
2d2c0c6423648bb84000626023212d2c4523456023456023456023766818
b08062202d2cb00426b00426b00425b0042545234520b003266062636820
b0032661658a2344442d2c2045b0005458b040442045b04061441b212159
2d2c45b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b
2121592d2c4b515820b0032545695358441b2121591b2121592d2c45b014
43b0006063b0016069442d2cb02f45442d2c452320458a60442d2c452345
60442d2c4b235158b90033ffe0b134201bb3330034005944442d2cb01643
58b00326458a586466b01f601b64b020606620581b21b04059b001615923
586559b02923442310b029e01b2121212121592d2cb0164358b004254564
b020606620581b21b04059b0016123586559b0292344b00425b007250820
58021b0359b0052510b004252046b0042523423cb0072510b006252046b0
0425b0016023423c2058011b0059b0052510b00425b029e0b0072510b006
25b029e0b00425b00725082058021b0359b00425b003254348b00625b003
25b0016043481b2159212121212121212d2cb0164358b004254564b02060
6620581b21b04059b0016123581b6559b0292344b00525b0082508205802
1b0359b0042510b005252046b0042523423cb00425b0072508b0072510b0
06252046b00425b0016023423c2058011b0059b0042510b00525b029e0b0
2920456544b0072510b00625b029e0b00525b00825082058021b0359b005
25b003254348b00425b0072508b00625b00325b0016043481b2159212121
212121212d2c02b00425202046b004252342b0052508b003254548212121
212d2c02b0032520b0042508b0022543482121212d2c452320451820b000
50205823652359236820b040505821b04059235865598a60442d2c4b5323
4b515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b
53234b515a58381b2121592d2cb000214b5458381b2121592d2cb0024354
58b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb00243
5458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c208a
08234b538a4b515a5823381b2121592d2c0020b200400325b0062649618b
3812342d2c014623466023466123201020468a61b8ff80628ab140408a70
4560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2c
b012004b014b54422d2cb1020042b123018851b1400188535a58b9100000
20885458b202010243604259b12401885158b920000040885458b2020202
436042b12401885458b2022002436042004b014b5258b202080243604259
1bb940000080885458b202040243604259b94000008063b80100885458b2
02080243604259b94000010063b80200885458b202100243604259b94000
020063b80400885458b202400243604259595959592d2c451868234b5158
2320452064b04050587c59688a6059442d2cb00016b00225b0022501b001
233e00b002233eb10102060cb00a236542b00b234201b001233f00b00223
3fb10102060cb006236542b0072342b00116012d2c20b82000628a602362
2d2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed
5921b006255cb006255a58b0092b5920b005254ab0042547b004254760b0
062547b0806361b00225b0005558b00325b00725496359b0082558001b01
59b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b0
032520b0005558631b2159612320b0005558b080631b21b08059b0592bb0
06255c586959b00425202010b00048233ab0062658001b0159b0052658b0
03252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358
b00625b00a251bb00925b0072559b00225b00225070cb005256323b00625
636020b94000040063535821b00426b00426b00a1bb94000040063655158
b0042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab009
2eb00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525
b0052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1b
ed59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b
25c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d
254961b08062b00525b005250bb00a252338b00625b0062587b00825b008
250bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ff
a723792121212121212121212121212d2c23b0005458b9400000001bb900
004000598ab0005458b9400000001bb90000400059b05b2b2d2c08b00054
58b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940
0000001bb90000400059b05b2b2d2cb00426b00426080db00426b0042608
0db05b2b2d000001000000059eb832f46b0a5f0f3cf50019080000000000
bbeb7ccc00000000c787a88bfbdafd8d09ec07c500010009000200000000
000000010000079efdda00000aa0fbdafa8609ec00010000000000000000
0000000000000012040e000001cf00000222008d0442008d03c8003f0539
008c03f3004703590048044b004b0407004a01f7006b01f7007e044b007e
044d004802d8007e03310049044b007903c900160000009e009e00d60153
020f0279036503fb0497056305b805fa068106f40773084608c209320000
0001000000120120001000bd000700020010002f006000000c6301410004
00010000000100120001000000000006001300004855484f42472b43616c
696272692d426f6c64000000b10903b802f9b21e1d1fb802f8b21e2b1fb8
02f7b21e2c1fb802f6b21e2c1fb802f5b21e2c1fb802f4b21e2b1fb802f3
b21e2c1fb802f2b21e2c1fb802f1b21e2c1fb802f0b21e2c1fb802efb21e
2c1fb802eeb21e2b1fb802edb21e2b1fb802ecb21e2c1fb802ebb21e2c1f
b802eab21e2c1fb802e9b21e2c1fb802e8b21e2c1fb802e7b21e2c1fb802
e6b21e2c1fb802e5b21e2c1fb802e4b21e091fb802e3b21e2c1fb802e2b2
1e2c1fb802e1b21d121fb802e0b21d191fb802dfb21d2f1fb802deb21d2f
1fb802ddb21d2f1fb802dcb21d2f1fb802dbb21d191fb802dab21d2f1fb8
02d9b21d2f1fb802d8b21d2f1fb802d7b21d2f1fb802d6b21d2f1fb802d5
b21d2f1fb802d4b21d2f1fb802d3b21d2f1fb802d2b21d2f1fb802d1b21d
2f1fb802d0b21d2f1fb802cfb21d2f1fb802ceb21d121fb802cdb21d121f
b802ccb21d121fb802cbb21d121fb802cab21d191fb802c9b21d2f1fb802
c8b21d2f1fb802c7b21d2f1fb802c6b21d2f1fb802c5b21d2f1fb802c4b2
1d2f1fb802c3b21d2f1fb802c2b21d2f1fb802c1b21d2f1fb802c0b21d2f
1fb802bfb21d121fb802beb21d121fb802bdb21d2f1fb802bcb21d2f1fb8
02bbb21d2f1fb802bab21d2f1fb802b9b21d2f1fb802b8b21d2f1fb802b7
b21d2f1fb802b6b21d2f1fb802b5b21d2f1fb802b4b21d2f1fb802b3b21d
2f1fb802b2b21d2f1fb802b1b21c321fb802b0b21c321fb802afb21c331f
b802aeb21c331fb802adb21c331fb802acb21c331fb802abb21c331fb802
aab21c311fb802a9b21c311fb802a8b21c321fb802a7b21c321fb802a6b2
1c321fb802a5b21c321fb802a4b21c321fb802a3b21c321fb802a2b21c33
1fb802a1b21c331fb802a0b21c331fb8029fb21c331fb8029eb21c331fb8
029db21c331fb8029cb21c311fb8029bb21c311fb8029ab21c321fb80299
b21c321fb80298b21c321fb80297b21c321fb80296b21c321fb80295b21c
331fb80294b21c331fb80293b21c331fb80292b21c331fb80291b21c331f
b80290b21c331fb8028fb21c331fb8028eb21c311fb8028db21c321fb802
8cb21c321fb8028bb21c321fb8028ab21c321fb80289b21c321fb80288b2
1c331fb80287b21c331fb80286b21c331fb80285b21c331fb80284b21c33
1fb80283b21c331fb80282b21b341fb80281b21b341fb80280b21b341fb8
027fb21b341fb8027eb21b341fb8027db21b341fb8027cb21b341fb8027b
b21b341fb8027ab21b341fb80279b21b341fb80278b21b341fb80277b21b
341fb80276b21b341fb80275b21b341fb80274b21b341fb80273b21b341f
b80272b21b341fb80271b21b341fb80270b21b341fb8026fb21a351fb802
6eb21a351fb8026db21a351fb8026cb21a351fb8026bb21a351fb8026ab2
1a351fb80269b21a351fb80268b21a351fb80267b21a351fb80266b21a35
1fb80265b21a351fb80264b21a351fb80263b21a351fb80262b21a351fb8
0261b21a351fb80260b21a351fb8025fb21a351fb8025eb21a351fb8025d
b21a351fb8025cb21a351fb8025bb21a351fb8025ab21a351fb80259b219
371fb80258b219371fb80257b219371fb80256b219371fb80255b219371f
b80254b219371fb80253b219371fb80252b219371fb80251b219371fb802
50b219371fb8024fb219371fb8024eb219371fb8024db219371fb8024cb2
19371fb8024bb219371fb8024ab219371fb80249b219371fb80248b21937
1fb80247b219371fb80246b219371fb80245b219371fb80244b219371fb8
0243b219371fb80242b219371fb80241b219371fb80240b219371fb8023f
b219371fb8023eb219371fb8023db219371fb8023cb219371fb8023bb219
371fb8023ab219371fb80239b218391fb80238b218391fb80237b218391f
b80236b218391fb80235b218391fb80234b218391fb80233b218391fb802
32b218391fb80231b218391fb80230b218391fb80301b2182e1fb8022fb2
18391fb8022eb218391fb8022db218391fb8022cb218391fb8022bb21839
1fb8022ab218391fb80229b218391fb80228b218391fb80227b218391fb8
0226b218391fb80225b2173b1fb80224b2173b1fb80223b217321fb80222
b2173a1fb80221b2173b1fb80220b2173b1fb8021fb2173b1fb8021eb217
3b1fb8021db2173b1fb8021cb2173b1fb8021bb2173b1fb8021ab2173b1f
b80219b2173b1fb80218b2173b1fb80217b2173b1fb80216b2173b1fb802
15b217321fb80214b2173a1fb80213b2173b1fb80212b2173b1fb80211b2
173b1fb80210b2173b1fb8020fb2173b1fb8020eb2173b1fb8020db2173b
1fb8020cb2173b1fb8020bb2173b1fb8020ab2173b1fb80209b217321fb8
0208b217321fb80207b2173b1fb80206b2173b1fb80205b2173b1fb80204
b2173b1fb80203b2173b1fb80202b2173b1fb80201b2173b1fb80200b217
3b1fb801ffb2173b1fb801feb2173b1fb801fdb2173b1fb801fcb2173b1f
b801fbb2173b1fb801fab2173b1fb801f9b2173b1fb801f8b2173b1fb801
f7b217321fb801f6b2173a1fb801f5b2173b1fb801f4b2173b1fb801f3b2
173b1fb801f2b2173b1fb801f1b2173b1fb801f0b2173b1fb801efb2173b
1fb801eeb2173b1fb801edb2173b1fb801ecb2173b1fb801ebb2173b1fb8
01eab2173b1fb801e9b2173b1fb801e8b2173b1fb801e7b217321fb801e6
b216231fb801e5b216231fb801e4b216371fb801e3b216371fb801e2b216
381fb801e1b216381fb801e0b216431fb801dfb216441fb801deb216441f
b801ddb216441fb801dcb216451fb801dbb216461fb801dab216461fb801
d9b216461fb801d8b216231fb801d7b216231fb801d6b216381fb801d5b2
16431fb801d4b216431fb801d3b216431fb801d2b216441fb801d1b21646
1fb801d0b216461fb801cfb216461fb801ceb216461fb801cdb216461fb8
01ccb216461fb801cbb216431fb801cab216231fb801c9b216231fb801c8
b216371fb801c7b216371fb801c6b216381fb801c5b216421fb801c4b216
431fb801c3b216441fb801c2b216451fb801c1b216461fb801c0b216461f
b801bfb216461fb801beb216461fb801bdb216461fb801bcb216461fb801
bbb216461fb801bab216371fb801b9b216381fb801b8b216421fb801b7b2
16431fb801b6b216431fb801b5b216431fb801b4b216441fb801b3b21644
1fb801b2b216441fb801b1b216451fb801b0b216451fb801afb216451fb8
01aeb216461fb801adb216461fb801acb216461fb801abb216461fb801aa
b216461fb801a9b215341fb801a8b215411fb801a7b215411fb801a6b215
4d1fb801a5b2154e1fb801a4b2154f1fb801a3b215521fb801a2b215401f
b801a1b2154d1fb801a0b2154e1fb8019fb2154f1fb8019eb215521fb801
9db2154d1fb8019cb215401fb8019bb2154d1fb8019ab2154e1fb80199b2
154e1fb80198b2154f1fb80197b2154f1fb80196b215501fb80195b21552
1fb80194b215521fb80193b215521fb80192b215411fb80191b2154f1fb8
0190b215501fb8018fb215501fb8018eb215511fb8018db215521fb8018c
b215521fb8018bb215521fb8018ab214581fb80189b214591fb80188b214
5c1fb80187b2145d1fb80186b2144a1fb80185b2145b1fb80184b2145c1f
b80183b214591fb80182b2145d1fb8018140af145d1ff00f451fef0e481f
e00c4e1fc20c4e1fc10c4e1fc00c4e1fbf0b561fb20b561fb10b561fb00b
561faf0b561fae0b561fad0b561fac0b561fab0b561faa0b561fa90b561f
a80b561fa70b561fa60b561fa50b561fa40b561fa30b561fa20b561fa10b
561fa00b561f9f0b561f9e0a681f9a0a681f990a681f980a681f970a681f
960a681f950a681f940a681f930a681f920a681f910a681f9009681f8f09
681f8e09681f8d09681f8c09681f410902fc02fa0056001f02fb02fa0068
001f017fb213321fb8017eb212371fb80174b212371fb80173b211421fb8
0172b211421fb80171b211421fb80170b211421fb8016fb211421fb8016e
b211421fb8016db211421fb8016cb211421fb8016bb211421fb8016ab211
421fb8013cb211421fb8013bb210421fb8013ab210421fb80139b210421f
b80138b210421fb80137b210421fb80136b210421fb80135b210421fb801
34b210421fb80133b210421fb80132b20f451fb80131b20f451fb80130b2
0f451fb80112b20f451fb80111b20f451fb80110b20f451fb8010fb20f45
1fb8010eb20f451fb8010db20e481fb8010cb20e481fb8010bb20e481fb8
010ab20e481fb80109b20e481fb80108b20e481fb80107b20d4a1fb80106
405b0d4a1fee0d4a1fed0d4a1fec0d4a1feb0d4a1fea0d4a1fe90c4e1fdf
0c4e1fde0c4e1fdd0c4e1fdc0c4e1fdb0c4e1fda0c4e1fd90b561fd80b56
1fd70b561fbe0b561fbd0b561fbc0b561fbb0b561fba0b561f9d0a681f9c
0a681fb80180b213321fb8017ab211401fb80179b211421fb80178b21142
1fb80177b211421fb80176b211421fb80175b211421fb80143b211421fb8
0142b210421fb80141b210421fb80140b210421fb8013fb210421fb8013e
b210421fb8013db20f451fb80115b20f451fb80114b20f451fb80113b20f
451fb903030302b2401fa4be030200b4030200c4030200030300b213321f
b8017bb213321fb80153b212371fb80152b211401fb80151b211401fb801
50b211401fb8014fb211401fb8014eb211401fb8014db211401fb8014cb2
11401fb8014bb211401fb8014ab211401fb80149b211401fb80148b21140
1fb80147b211401fb80146b211401fb80145b211401fb80144b211401fb8
0122b211401fb80121b210421fb80120b210421fb8011fb210421fb8011e
b210421fb8011db210421fb8011cb210421fb8011bb210421fb8011ab210
421fb80119b210421fb80118b20f451fb80117b20f451fb80116409b0f45
1ffd0f451ffc0f451ffb0f451ffa0f451ff90e481ff80e481ff70e481ff6
0e481ff50e481ff40e481ff30d4a1ff20d4a1ff10d4a1fe70d4a1fe60d4a
1fe50d4a1fe40d4a1fe30d4a1fe20d4a1fe10c4e1fcd0c4e1fcc0c4e1fcb
0c4e1fca0c4e1fc90c4e1fc80c4e1fc70c4e1fc60c4e1fc50c4e1fc40c4e
1fc30c4e1fb80c4e1fb70b561fb60b561fb50b561fb40b561fb30b561f9b
0a681fb802fdb212371fb8017db212371fb8017cb212371fb80169b2112e
1fb80168b2112e1fb80167b211401fb80166b211401fb80165b211401fb8
0164b211401fb80163b211401fb80162b211401fb80161b211401fb80160
b211401fb8015fb211401fb8015eb211401fb8015db211401fb8015cb211
401fb8015bb211401fb8015ab211401fb80159b211401fb80158b211401f
b80157b211401fb80156b211401fb80155b211401fb80154b211401fb801
2fb211401fb8012eb210421fb8012db210421fb8012cb210421fb8012bb2
10421fb8012ab210421fb80129b210421fb80128b210421fb80127b21042
1fb80126b210421fb80125b20f451fb80124b20f451fb80123b20f451fb8
0105b20f451fb80104b20f451fb80103b20f451fb80102b20f451fb80101
b20e481fb8010040a20e481fff0e481ffe0e481fe80c4e1fd60c4e1fd50c
4e1fd40c4e1fd30c4e1fd20c4e1fd10c4e1fd00c4e1fcf0c4e1fce0b561f
b90b561f8503251f84032e1f83012e1f8248805581ab80557f487d557eab
7d550b7d3b7d4b7d030b7d1b7d4b7d7b7dab7ddb7d067c487a557bab7a55
047a147a020a7948775578ab77550b77010c764875555475e475f4750314
755475647574759475d475e47507a475b475c47503b8ffc0401275383b46
807590750214757475020075010fb8ffc04021750b0e467448725573ab72
5504723472023bf47201e07201023072015072607202b8ffc0b372242846
b8ffc0403572161a461072307240720371486f5570ab6f554f6f6f6f7f6f
9f6fbf6f057f6f8f6f02af6fbf6f02406f090d466e486d55df6d0100bc02
ff001002ff00c002ffb2030a6fbb02fe000100ef02fe40ff016b032e1f6a
03251f692e675568ab6755662e645565ab6455632e6255612e60555f2e5d
555eab5d555c2e5a555bab5a55592e58555703251f562e545555ab545553
2e515552ab51554f2e4e554e03251f4d2e4b554cab4b554a2e485549ab48
55504801472e46554503361f001f01001e01001e701e801ef01e040b601d
701d02701de01df01d03701cf01c027f1b010f1a7f1a8f1a030f1a8f1a02
0f1a8f1a020f191f198f199f19af19050f198f199f19030c701280120270
1180110230114011d011e011040011a011020f8f0f9f0faf0f034f0f5f0f
ef0fff0f04af0f01af0ebf0ecf0e034f0e5f0e6f0e030f0eaf0ebf0e0310
400e2e31460f0d1f0d40472f0d033c2f0d3f0d4f0d038f0d01400d2e3246
400d2427463f0c4f0c5f0c039f0c01400c262946ef0aff0a02400a242746
ef09ff0902ff09010003012001010001100120010308b8ffc0b301151f46
b80100b316010501b80190b154532b2b4bb807ff524bb008505bb00188b0
2553b00188b040515ab00688b000555a5b58b101018e59b101024354b014
4b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0805358b0
401d594bb0ff5358b0001db1160042592b5e73757373742b732b73742b2b
73745e732b5e7374757374755e73747573015e7374737475757473745e73
7473002b2b732b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
73745e73732b2b7374752b2b732b2b73755f75755e732b2b2b5e7373732b
7374752b5e732b2b5e732b2b73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b732b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[4709 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 678 4 <0001003fffe9038c0525004900bbb10102435558b900410297b524322432
0c1bb8029cb2000c2ebb012d0037000a012db61137113711163cb8ffe8b4
0b0f014c3cb8012d400c411b05295316180b0f014c16b80158b240055600
183f1a4ded2b3f123939ed2b1139392f2f10ed10ed012fd4ed1239392f2f
ed31301bbc002e012d0037000a012db61137113711163cb8ffe8b40b0f01
4c3cb8012d400c411b05295316180b0f014c16b80158b240055600183f1a
4ded2b3f123939ed2b1139392f2f10ed10ed31305901140e0223222e0435
343e0233321e0233323e0235342e0635343e0233321e0615140e0223222e
0223220e0215141e06038c4c82ae634373583b1a0b04090f0a0e33506f49
304c351c304d6268624d3045759f592e5c503e1407050203070d0b0b3046
5c372b402b152f4f6468644e300184669a6734161f221a312e1f2a1a0b21
2821172a3e262c3f312b303d5574515d8d5d2e0e181e140e17231a1d281a
0c1c211b1525341d2b3f312b303d5573>SMQAAA+Calibri-Bold AddT42Char 
1 2350 9 <0002004affe903b603d7002b00340105b10102435558b31313212cb80243
b22b3404b80272400a21032c132c021b2cc304b8ffc040170d014d000410
04024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8ffe84020
0d014d2fe4264a18f6000e100e0211030e09180c014d09180f014d09f940
1c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d2bed5e5d
012fed32dded12392f31301b4009032c132c021b2cc304b8ffc040170d01
4d00041004024c5004600402a004b0040204041c2fb8ffe8b30f014d2fb8
ffe840200d014d2fe4264a18f6000e100e0211030e09180c014d09180f01
4d09f9401c4d00183f1a4dfd2b2bd45f5e5ded3fed2b2b12392f5d715e5d
2bed5e5d3130590114062321141e0233323e0233321e0215140e0623222e
0235343e0233321e021527362623220e020703b62924fde11b3b5d414264
49300f090c08030204080d3a5a744277b3783b3e76a96a709f6630f4035b
5f30472f190201fa2e2c395d412213171307122119161f160f0e1817113c
7aba7d77bf85464275a05e206a79243d532f>SMQAAA+Calibri-Bold AddT42Char 
1 3560 14 <0001007efffa02bb03d700330070b10102435558b1260fb80260400c001a
0f0a1f0a2f0a030d030ab8ffe8b30b014d0ab80153400a402b4a260f1520
49154c00183f3f1239393f1a4ded2b5f5e5d012fc4ed3931301bb9000aff
e8b30b014d0ab80153400a402b4a260f152049154c00183f3f1239393f1a
4ded2b31305901140e0223222e0223220e020711140e0223222e02351134
3e0233321e0215153e0333321e0602bb04080d0a0814191e12152a2d311c
0c1d302525301d0c0a1a291f202a170a233e38381c0d1e20180b05040203
4b242e1a0a07080711243c2cfdd40a0f0a05050a0f0a037c0a0f0a05050a
0f0a6f3241260f0307090a0c152a>SMQAAA+Calibri-Bold AddT42Char 
1 4484 17 <00010016fffa03b303c6002c0055b10102435558b210211fb80284b64015
2120062123b8025d400c400020212849210b1a490b4c00183f3f12393f01
192f1a18dd1a4ded12391a10dd1aed123931301bb72849210b1a490b4c00
183f3f12393f31305901140e0207010e0323222e0227012e0235343e0233
321e0217131737133e0333321e0203b301030504fef40511274336354326
1105fef40607010b1c312529321d0c04cb0606c8030d1c2f26252f1a0a03
9f050e11160efcd911150c04050c1510032714200e060a0f0a040509110c
fd711919028f0c110905040a0f00>SMQAAA+Calibri-Bold AddT42Char 
1 2758 10 <0002006bfffa018d054e001500210045b10102435558bf001602bf001c00
150260000a001f017bb540191049054c00183f3fd61a4ded012fedd4ed31
301bb9001f017bb540191049054c00183f3fd61a4ded31305925140e0223
222e023511343e0233321e0215131406232226353436333216017a0c1d30
2525301d0c0c1d302525301d0c133e54553b3d55543c220a0f0a05050a0f
0a037a0a0f0b06060b0f0a01304c3a38494c3b39>SMQAAA+Calibri-Bold AddT42Char 
1 1738 7 <00010048ffea032103d60035009db10102435558b21c0027be0274000e00
18011f001f0024ffe8b40b0f014c24b8011fb2134a04ba01480031ffc040
0b0b014d312c180b0f014c2cb80146b240094d00183f1a4dfd2bd42bed3f
fd2bd4ed012fedc43231301bbc0018011f001f0024ffe8b40b0f014c24b8
011fb2134a04ba01480031ffc0400b0b014d312c180b0f014c2cb80146b2
40094d00183f1a4dfd2bd42bed3ffd2bd4ed31305925140e0623222e0235
343e0233321e0615140623222e0223220615141e0233323e0233321e0203
21030507183a4a572e679f6c374378a462284d4335160905031410112634
483262681a334d33344b38260d090c0704b01a23180f17211a10407db474
86c3803e0e181e160f1823193a2f1c221c9792486e4a251f261f0a1b2a00
>SMQAAA+Calibri-Bold AddT42Char 

1 0 1 <> SMQAAA+Calibri-Bold AddT42Char 
1 428 3 <0002008dfffa0403050e001c00290080b10102435558b12406bb02930011
001d02c14009001125180b0f014c25b8012bb306060c23b8ffe8b40b0f01
4c23b8012bb44015510c5500183f3f1a4ded2b12392fed2b012fd4ed10ed
3231301bb625180b0f014c25b8012bb306060c23b8ffe8b40b0f014c23b8
012bb44015510c5500183f3f1a4ded2b12392fed2b31305901140e022323
11140e0223222e02351134363321321e0405342e0223231133323e020403
4482bd806c0d1e322726331e0c312801312e537477542cfeed30464d2970
763f55361c03856da8733cfe630a100a06060a100a048c2f2f07173e5f7f
6244582a0bfe49223d55>SMQAAA+Calibri-Bold AddT42Char 
1 3330 13 <00020048ffe9040403d7001300270071b10102435558bf00140275000000
1e0275000a0019ffe8b40b0f014c19b8011a40090f4a23180b0f014c23b8
011cb240054d00183f1a4ded2b3fed2b012fedd4ed31301bb90019ffe8b4
0b0f014c19b8011a40090f4a23180b0f014c23b8011cb240054d00183f1a
4ded2b3fed2b31305901140e0223222e0235343e0233321e0205342e0223
220e0215141e0233323e0204043c7ab87b77b074383d7ab77b78b07338fe
fd1532533f3854361b1631543e3954361a01e972bc884a427eb87672bd87
4a417eb881426f522e294f6f47426f522d294e6f>SMQAAA+Calibri-Bold AddT42Char 
1 2038 8 <0002004bffe903cc056d002600390095b10102435558b20b1b39bb025e00
00002f0272400a1321460b39271b040e2ab8ffe8b40b0f014c2ab8014940
09184a34180b0f014c34b80149b4400e4d054c00183f3f1a4ded2b3fed2b
1217393f012fedd4ed323931301b400921460b39271b040e2ab8ffe8b40b
0f014c2ab801494009184a34180b0f014c34b80149b4400e4d054c00183f
3f1a4ded2b3fed2b1217393f31305925140e0223222e023535060623222e
0235343e023332161711343e0233321e021503262623220e0215141e0233
323e023703cc0a18291e2028190b45975c668d59283362925f4b7a3c0b1d
302525301c0cfa36633631472b15122944341a31333620220b0f0a04040a
0f0b634a524f86b36377be86483d3b01e30a100b06060b100afd34444831
526535386a53320f22372800>SMQAAA+Calibri-Bold AddT42Char 
1 0 0 <00050000fe7303db050e000300070039004d004e0054bc000d019d001700
3a01cbb44444082d07be019d0002002001cb00080001019d401304020d1b
1b3f2335068c035111493f078c0254003ffddeddc63ffddecd12392fcd01
2fddedd6ed10fdc611392fedd4ed3130011121110111211101140e020707
060623222e02352726363333323e0235342623220e0223222e0235343637
3e0333321e0203140e0223222e0235343e0233321e020103dbfc4f0345fd
240279213b533105012b25171f130808031f1e0d2533200f4b4d2336281a
05040806030508072736422355774a22ce0a18271c1d27180a0a18271d1c
27180afdc2050efaf2050efb570444fbbc02e839583e2406790d0b020509
089d281e1524311c3d4b0d0f0d050e1b171a1c0708110e0a2a4861fd991a
25170a0a17251a1c25180a0a1825fd3b>SMQAAA+Calibri-Bold AddT42Char 
SMQAAA+Calibri-Bold /CharStrings get begin
/g4 4 def
/g9 9 def
/g14 14 def
/g17 17 def
/g10 10 def
/g7 7 def
/g1 1 def
/g3 3 def
/g13 13 def
/g8 8 def
end
SMQAAA+Calibri-Bold /Encoding get
dup 33 /g4 put
dup 34 /g9 put
dup 35 /g14 put
dup 36 /g17 put
dup 37 /g10 put
dup 38 /g7 put
dup 39 /g1 put
dup 40 /g3 put
dup 41 /g13 put
dup 42 /g8 put
pop
end
%ADOEndSubsetFont
/GSVBDZ+Calibri-Bold /SMQAAA+Calibri-Bold findfont ct_VMDictPut/GSVBDZ+Calibri-Bold*1 [33{/.notdef}rp /g4 /g9 /g14 /g17 /g10 /g7 /g1 /g3 /g13 /g8 213{/.notdef}rp]GSVBDZ+Calibri-Bold nfGSVBDZ+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf555.197 23.8 mo(!"#$%&"'\(#\)$%*"#')[8.50873 9.06671 6.40253 8.50873 4.42267 7.53656 9.06671 4.06256 9.58856 6.40253 9.67853 8.50873 4.42261 9.66064 9.06671 6.40253 0 ]xsh2 lw
[] 0 dsh
284.822 281.426 mo
284.822 88.9732 li
@
284.822 86.9886 mo
280.458 94.4694 li
280.18 94.9464 280.341 95.5588 280.818 95.837 cv
281.295 96.1153 281.907 95.9542 282.185 95.4771 cv
284.822 90.9579 li
287.458 95.4771 li
287.736 95.9542 288.348 96.1153 288.825 95.837 cv
289.302 95.5588 289.464 94.9464 289.185 94.4694 cv
cp
ef
285.835 280.559 mo
514.851 280.559 li
@
516.835 280.559 mo
509.355 284.922 li
508.878 285.201 508.265 285.04 507.987 284.563 cv
507.709 284.086 507.87 283.473 508.347 283.195 cv
512.866 280.559 li
508.347 277.922 li
507.87 277.644 507.709 277.032 507.987 276.555 cv
508.265 276.078 508.878 275.917 509.355 276.195 cv
cp
ef
284.2 280.6 mo
312.133 275.733 340.067 270.867 367.4 255.8 cv
394.733 240.733 426.333 211.533 448.2 190.2 cv
470.067 168.867 498.6 127.8 498.6 127.8 cv
@
284.2 103 mo
288.333 109.667 298.467 131.667 305.8 143 cv
313.133 154.333 318.333 161.667 328.2 171 cv
338.067 180.333 348.733 190.867 365 199 cv
381.267 207.133 402.6 214.733 425.8 219.8 cv
449 224.867 504.2 229.4 504.2 229.4 cv
@
%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 1612 11 <0002009e0000055a05ba000f001d00e5402f201f0143081c1d1e02010211
101e0f000817262009011f400d0d0255092010100255090a0f0f02550918
0d0d025509b8fff440150c0c0655091a1f1d102001200001002010100255
00b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d1e3b5c182b10f62b2b2b2b2b
2b5d3cfd3c10f62b2b2b2b2b5ded003f3cfd3c3f3cfd3c31304379403603
1b0708060805080408040619181a1802060b0a0c0a0d0a03061516141613
1603061b03172101120e17210118081c2101160a1121002b2b012b2b2a2a
2a2a81015d3311213217161716121514020e022325213236373636353426
272623219e01f9ab5a7e5974734e7a91cd85feb1013991a531454d976c4e
adfecc05ba151d4c62fecfc4a7fefea96132ad363145e9a6e6f72a1e>GSVBDY+ArialMT AddT42Char 
1 5708 19 <00020086ffe8041f05ba0010001d0180409b01050c0f240535054505053f
1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c1a5d085d
0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e213ec17ec
19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605da1df504
fa100c10150e040602001b1c0607010a151c0e0b1824d00b01100b400b60
0b800b041f400d0d02550b0c0f0f02550b180d0d02550bb8fff6b40c0c02
550bb8fff0b40b0b06550bb8fff4b40f0f06550bb8ffe0b40c0c06550bb8
fff4402f0d0d06550b7401113300040c0c025500040d0d06550033032502
02c001019001a001b001f001041f013f014f010301b8fffeb41010025501
b8fffc401d0e0e0255010c0d0d025501100c0c025501120b0b0255010c0b
0b065501b8fff8b41010065501b8fffc40160f0f065501180c0c06550114
0d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b2b2b5d71723c4d10
fdf42b2be410fd2b2b2b2b2b2b2b2b5d71ed003fed3f3fed3f1139111239
3130005d015d7172007121231133113633321e0215100023222703141716
333236353426232206012da7b472b162af7140fef2bdbc6b0234559176ac
a57576ac05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>GSVBDY+ArialMT AddT42Char 
1 6622 21 <00020046ffe803df05ba0011001d015540a40a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b1833010025110f2510
10d011011011401160118011041f400b0b02551f400d0d02551112101002
5511b8fff440110f0f025511060e0e025511180d0d025511b8fff2400b0b
0b0655110e1010065511b8ffeeb40c0c065511b8fff840420d0d06551174
1224bf07cf07df07ff07041f073f074f0703071e0b0b025507180c0c0255
071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c065507191e345018
2b4e10f42b2b2b2b2b2b5d714dedfd2b2b2b2b2b2b2b2b2b2b5d713c10ed
10fd3ce4003fed3f3c3fed3f3c11391112393130005d01715d0071213506
232226263534123633321617113311011416333236353426232206033865
c47fd5756ad48360962fb3fd20ac7576a5a87b78a1869e8cfba39f01038a
5141020efa460212cccac1c6daccc400>GSVBDY+ArialMT AddT42Char 
1 7844 24 <00010087000003e805ba00140161b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe0403a1719341708110c1114030501
000f1c0507140b0a0c250940333634ff0901c0090116400b0b0255164010
10025509281010025509140e0e025509b8ffec40110d0d025509040c0c02
55091a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d
0d0655090a0f0f065509b8fff6b60c0c0655094e16b8ffc04017343634b0
16f016027016a016b016ff1604160214250100b8ffc04010333634f00001
00002000d000e0000400b8fffab41010025500b8fffa40170e0e02550004
0c0c025500080b0b025500040b0b065500b8fffa40160f0f065500020c0c
065500020d0d0655004e154750182b10f62b2b2b2b2b2b2b2b5d712b3cfd
3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b5d712bed003f3c3fed3f1139
113901123931304379400e060e07250e060c1b010d080f1b01002b012b2b
81002b5d2b012b33113311363332161615112311342623220606151187b4
7ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb
>GSVBDY+ArialMT AddT42Char 
1 9320 28 <00010087000003e6043e0016017d40130503061302a810b810e303e713f0
03f6130604b8fff0403c0b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0e2418401010025518400b0b02550b2810
1002550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02
550bb8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f
0f06550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0
401a343634b018f018027018a018b018c01804180302331516250100b8ff
f6b41111025500b8fffab41010025500b8fffa40170e0e025500040c0c02
55000a0b0b025500040b0b065500b8fffa40110f0f065500020c0c065500
040d0d065500b8ffc04012333634f0000100002000d000e00004004e1710
f65d712b2b2b2b2b2b2b2b2b2b3cfd3cf43c105d712bf65d712b2b2b2b2b
2b2b2b2b2b2b2b2bed3c103c003f3c3f3fed113901123931304379401606
11090a080a070a0306102611060e1b010f0a121b01002b012b2b2a81015d
71002b5d71331133153633321616171615112311342626232206151187a2
75dd60a150100ab42a6b4873a7042697af45704d327dfd7302866e6d4192
ccfdbc00>GSVBDY+ArialMT AddT42Char 
1 12580 35 <00010006000005b704260012041db10202435458b90012fff440110d0d02
5507060d0d025500060d0d02550ab8ffd4b40c0d025504b8ffe8400b0c0d
025511200c0d02550ab8ffc0b40e10025504b8ffc0402f0e10025511400e
100255040a110301000c06070601060f0a000a0d0c060c0c02550c110102
040a04110a0c0c025511b8fff8b40d0d0255112f2b2bcdcd10d6cd10d42b
cd003f3f3f3f3f111217393130002b2b2b2b2b2b012b2b2b1b40160f1401
2a04290a024a115b118e110311200d0d06550ab8ffe0b40d0d065504b8ff
e0b40d0d065511b8fff040091f2134101c1d273409b8fff040b71f243404
060c0913061b09191205040004060b090b0e08121000130314071c081b0b
1d0e240025072a082b0e340035073a083b0e4403470640074d084b0b430f
47114a125b0f52126b076408671279067a077408b906ba0fb612f506fb09
280b112800280d270e280f27122f1438003712770886089803970ca701a8
02a80ba60cb500b606ba0ec804d606d909e804e80fe712f406fa091c0b06
0d0d06550c060d0d065510060d0d06550e060d0d06550f060d0d065512b1
0602435458401b0a0e0f0412001108070825070f250e122500000e07030d
010c250db8ffd640370b0b06550d0225012a0b0b0655010d011413060a0b
11260a2b115404520a5c116c117c118a110a110a040300010f0a000a0c06
07060106003f3f3f3f3f111217395d01111239392f2bf42f2bf411121739
10e410e410e41112391112391112391b40140305050206070705090a0a08
0b0c0c0a1011110fb8ff4bb305001220b8ff4940660a0f0e20c311070820
071112122b0507140505070e0a0c0c250d0e140d0d0e08110f0f2b0a0814
0a0a080005020225010014010100000201071204080f110c0e0d0a110a04
03120d0c0c0808070702020106120f0f0e0e000a14f6100d01600d700d80
0d030db801a7400a204f0a016f0a7f0a020ab8025540094f11016f117f11
0211b80255400b1005016005700580050305b801a7b501f613f666182b4e
10f4194df45d5d18fd5d71fd5d711a19fd5d5d18e6003f3c103c103c3f3c
103c103c103c103c1217390111123939123939113939123939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
070e103c070e103c870e10c4870e10c44bb01f5358b40d200c2002bcffe0
0001ffe0000effd0b400300f2012b8ffe0013838383838383838594bb034
5358b90008ffd0b10730013838594bb021534bb033515a58b90008ffe0b1
0720013838594bb012534bb01e515a58b9000effd0b60f200d200c2008b8
ffd0b2073012b8ffe0b2003802baffe00001ffe001383838383838383838
38594bb012534bb017515a58b90011ffe0b30a2004200038383859593130
01435c58b9000effd4b61239002c123900b8ffd4b113392b2b2b592b2b2b
2b2b5d71722b2b2b002b2b2b715d015d5921013313173637133313173713
330123032703014bfebbbaa93f0433a9b99f353db6affeb4bba929d70426
fd9be411ca026efd98cbcd0266fbda027cb5fccf>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/D 11 def
/b 19 def
/d 21 def
/h 24 def
/n 28 def
/w 35 def
end
GSVBDY+ArialMT /Encoding get
dup 68 /D put
dup 98 /b put
dup 100 /d put
dup 104 /h put
dup 110 /n put
dup 119 /w put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk 18{/.notdef}rp /equal 6{/.notdef}rp /D 8{/.notdef}rp /M 2{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 3{/.notdef}rp /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /x /.notdef /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [14 0 0 -14 0 0 ]msf431.4 177.971 mo(S\(p\) )[9.3381 4.6619 7.78677 4.6619 0 ]xsh325.379 163.014 mo(D\(p\) )[10.1108 4.6619 7.7868 4.6619 0 ]xshGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf460.795 293.759 mo(p \(price\) )[6.67438 3.33362 3.99591 6.67438 3.99591 2.66641 6 6.67441 3.99591 0 ]xshGSVBDY+ArialMT*1 [0 -12 -12 0 0 0 ]msf278.095 168.924 mo(x \(bandwidth\) )[-6 -3.3336 -3.99591 -6.67439 -6.67439 -6.67441 -6.67439 -8.6664 -2.6664 -6.67439 -3.3336 -6.67439 -3.99591 0 ]ysh[8 6 ] 0 dsh
419.4 218.385 mo
419.4 281.359 li
@
419.117 218.385 mo
283.917 218.385 li
@
GSVBDY+ArialMT*1 [18 0 0 -18 0 0 ]msf407.397 298.148 mo(p* )[10.0116 7.00574 0 ]xshGSVBDY+ArialMT*1 [0 -18 -18 0 0 0 ]msf278.378 225.321 mo(x* )[-9 -7.00574 0 ]ysh%ADOBeginSubsetFont: TFWPMX+Arial-BoldMT Initial
ct_T42Dict begin
-0.625 -0.375 2 1.016
 256 array 0 1 255 {1 index exch /.notdef put} for  /TFWPMX+Arial-BoldMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc0000075a6670
676d0000000000000818000005d7676c796600000000000020f000001ab8
686561640000000000000df000000036686865610000000000000e280000
0024686d74780000000000000e4c000000586c6f63610000000000000ea4
0000002e6d6178700000000000000ed4000000206e616d65000000000000
0ef400000028707265700000000000000f1c000011d26764697200000000
000000000000000005ba001c05ba001c05a7001c0426001c0000ffe40000
ffe40000ffe4fe69ffe405ba001cfe69ffe402ea0000011d0000011d0000
00000000000000b200ac00d70128012000b301fa001700f8011901310049
000400f7000300af00fd0095001400540096011200240016005500490104
0119012b008c019bff76ffe9003d009200a2ffb70182ffaa0016008f00c6
00f8001c00de04010037004e00550055006500e903e50059ff9a00080087
000b003b00520116006100d600d600f500000093009400be017cfff80004
001400820092003c00410041ffc1fffc002a008c049005d809b5009100bb
0106ff63ff69001e0022008a022bffd6ffdf0026005900a300ac0104012b
01c004480021006b00850098011903c6006b009500a400fe010c025d0343
05bf000000490056006e0077008a00aa00ca0112015005d805f0ff7bffe7
0006001300280061006900e90135014d02a5040cff3effda005b00b900c8
01190119011901c0045b04a7055bfe3fff9dffc2001500b7010a01bc01c1
0532058efd81ffa1ffae000c00260031003d004e00560062008300c100c9
00f100f2027fff7f00480053007700c5011d01200126012801d60219027e
027e03d3002e0041005d006b0075009f00b000b200ba00bb00bd00d600db
00e000e50114011b014a0162019101f2020c026402cf039b03b403d40401
04a9001600230025002a007400a500b600cc00cd00cf0105012001300150
016a016f0197019d01e002b002ec02f70408048304fb04fd0526fee0fefb
ff4efff50018001a004c007a007f009100a300b300b400ce00d500f200f3
00f601100138016801a101b001e001ec02090222024f0270029602a502ad
034e039103c104350442046b04cd04da0586058b076107fefca6fe93fead
fed1ffb7ffd10003000e00180026004600690081008f00a500bf00d300d5
00d900dd00e20119012b0138013b015a015e016801730188019401ad01c5
01d101ea01f20200020002000222023b0244024f026f0272027e02820293
029402a502cf02cf02d002da02dd02eb02f5030503220336037103a103b0
03b803d003e604100426042e0431044f045a04ff053205320547055305a8
05ab05c205f0063c0664067006e80782078408ccfd2afddefe00fe68feb0
feb3ffaa00080059007a0091009e00a200af00b400bb00ca00cc00ce00d9
00e000f40114011a01210127012b01390146014b014d0157015c01650182
018701920198019b01a201ae01c501c501d102070222022b024102530261
026502840287028d02b402b402ba02c902d602d802ed02f503170323032b
03310349035a035b036e03710374037e03840391039103aa03cf03d303e7
03e803ed04080417041e0475047a049904a704b404d1054c056d056d05a2
05bf05c005d105fc05fc0602061a061c062f066a06a806e2070607360750
078907d407f30870011c012a011a01200000000000000000000000000219
000b001e02aa0214047f01ed0000001d0104000f0091002b018801530112
01f3003f03fe0168010e047f01ed036e03150219041300000000064004b0
0000027401bb003501c5007f06020301000004e000b201dc02e004c3023d
00d50160011904a7036e05ca022100ab0426009002bc02bb014200b4023c
0256029c030001e501a800e5006b00780094016b017300ab01ed013a017d
0137017f00d4021603530184003cffa202040109014901f0006e03150081
0464005e0000000000000000000000000000000000000000000000000000
00000000013900dc00e9fe9e040d047c012b00b80096005900ac00df01a9
00fa0105ffec00170003005500610004008c00a3008500280120005d00d6
007f012601190104016c06cf00b4010600000737063e047a00f000f900e9
05ba042604420000ffe7fe69049e04e3ff37ff2d01200105012000a80074
0068004700f200e500d900bd00a800680047005c0048000a002800320041
0050005a0064007d00870091ffb0ff9cff83ff79ff6f00cb012000fa012c
01fa01a000d500b8005c003c00c800c8008f00d9018b00b3004700000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000fe6400c000ea01180125
013203b003ed0576059005aa05b405be05cd063100780084009b00cc00e2
00f4010a0120016300d100ea00f7010801420019002c0034004100380048
0058006c025903bd0043011a007000d30028003700420050005a00640073
00780082008c009c00a500bd00ce00f00110015c00be00d801020117012c
016300ea01080041004b0055005f007300a60109018301b300410064001e
002a00eb00fa010e01380274002c00400082009600b600c000cc00dc00e6
00f000ff010a0120012c013b01440156016300f700570064011001360050
01b10000ffb60039004e004403cc00e5002401100042012201a400f00060
00e0000e001d003905e30102002cfe4eff38026903bd011600ff000e00a0
0054001b003d01710041000f005000fd0015014f0035fe52002c00d30103
04b001d200b600c000990265ff870377fe6c00cb00a9005c004004760744
0000404154403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a292827
262524232221201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a09
0807060504030201002c4523466020b02660b004262348482d2c45234623
6120b02661b004262348482d2c45234660b0206120b04660b00426234848
2d2c4523462361b0206020b02661b02061b004262348482d2c45234660b0
406120b06660b004262348482d2c4523462361b0406020b02661b04061b0
04262348482d2c0110203c003c2d2c20452320b0cd442320b8015a515823
20b08d44235920b0ed51582320b04d44235920b09051582320b00d442359
21212d2c20204518684420b001602045b04676688a4560442d2c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b01723
70b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b00325
456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d2c
2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20b1
2cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb01723
44b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb01723
44b0177ae41b038a45186920b01723448a8a8720b0c05158b0112bb01723
44b0177ae41b21b0177ae45959182d2c2d2cb0022546608a46b040618c48
2d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a
23444565234520b00325606a20b009234223688a6a606120b01a8ab00052
7921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a
5279b31940201945208a54582321b03f1b235961442d2cb110114323430b
2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2c
b10e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d
2c0120b003252349b04060b0206320b000525823b002253823b002256538
008a63381b212121212159012d2c4bb06451584569b00943608a103a1b21
2121592d2c01b005251023208af500b0016023edec2d2c01b00525102320
8af500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c
003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006
430b2d2c3eb02a2a2d2c352d2c76b8023623701020b802364520b0005058
b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c6423
648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb815
55621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb400
0100000015b00826b00826b00826b008260f10161345683ab001162d2cb4
000100000015b00826b00826b00826b008260f1016134568653ab001162d
2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b2121
592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb01343
58031b02592d2cb0134358021b03592d2c4b54b012435c5a58381b212159
2d2cb012435c580cb00425b00425060c6423646164b0035158b00425b004
25012046b01060482046b0106048590a21211b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b8fff0
60482046b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b
2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab01243
5c5a58381b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a
58381b2121592d2c462346608a8a462320468a608a61b8ff806223201023
8ab902a702a78a70456020b0005058b00161b8ffba8b1bb0468c59b01060
68013a2d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b202020243604259b1
2401885458b2022002436042004b014b5258b2020802436042591bb94000
0080885458b202040243604259b94000008063b80100885458b202080243
604259b94000010063b80200885458b2021002436042595959592d000001
000000050f5cae4d87c55f0f3cf50819080000000000a2e33c1d00000000
c59b6255fafafcfd1000082400010009000100000000000000010000073e
fe4e00431000fafafa7a1000000100000000000000000000000000000016
06000100023900000556009506aa00910556004a078d00070473004904e3
0087047300550473004102aa0018023900930473008902390093071d007e
04e3005204e3008b04e3005b031d008702aa001f04e3008d0473000e0000
00360036009501bf02ef0410051705950633073907b9080a08a008d609b0
0a280aa60b270b990c290c9d0d5c000000010000001600f2003c008f0006
00020010002f00550000073c02c200050002000000010012000100000000
0006001300005444424552462b417269616c2d426f6c644d54000000b154
80410d03ac00af03ac0002001003ac002003ac00a003ac0003004003acb3
070d3240b803acb312143240b803acb2162b32b9ffc003acb23a3340b803
acb32d943280bc03ab005f0033ffc003abb2553340b803abb340443240b8
03abb3333b3240b803abb32f313240b803abb2083340b803abb30714321f
411a03ab002f03ab0002000f03ab002f03ab004f03ab008f03ab009f03ab
00bf03ab0006001003ab00df03ab00ff03ab000303a803a2b2461f40b803
a5b208330f411403a50001004003a500cf03a500ff03a50003002003a500
af03a500ef03a500ff03a50004ffc003a3b3090c3240b803a3b208330f41
1b03a30001000f03a3001003a3008003a300af03a300cf03a30005006f03
a3009f03a300ff03a30003009f03a200af03a2000203a203a1b2101f1041
0a039e007f039e0002039a000f0101001fffc00398b310143240b80399b3
0f1332404110039500500395000200b0034d00c0034d0002006f0391007f
03910002ffc0034bb22d3132b9ffc0034bb30a0e32104110038b0020038b
0080038b000300a0038b00010020038b0040038b0002ffc0038bb3131632
40b80383b20f1132b9ffc0037bb2303432b9ffc0037bb310183250411403
7800010365036e0023001f037e036e001e001f0363036e001d001f036203
64000d001fffc00340b30f1032804110033f0001033f03150029001f0341
03160032001f0344031a001b001fffc00375b20e1132b9ffc00375b2282a
32410a034303180032001f030f030d0034001f03080307b2321f20bb0340
000100400388b3090b3240b80388b2101532bd038503070014001f038003
07b2171f0fbd030a002f030a0002ffc00354b3090d3290410c035400a003
540002001f036e0001009f036e00010040036eb2090b3241110345031c00
16001f036b031d0015001f0346031e0015001f03a703a10046001f039db3
261c1fc0bb0393000100400392b3090d3240b8033eb2083340b8033eb30d
0e32c04109033e000100b0038e00c0038e0002ffc00390b3263832004126
03280030032800020020037f0030037f00020010038a0030038a0050038a
006f038a007f038a009f038a000600000389003003890002002f037a0070
037700900377009f037a0004ffc00315b20f1032b9ffc00315b2242832b9
03190318b2321f10bb031a0001ffc0031ab3090e3240b80318b2121332b9
ffc00318b30c0e323fbd0373004f0373000200400374b31718326fbb032a
00010040032cb3181b3240b80370b2090c32bd031703160032001fffc003
16b20e1132bd031c031e0016001f031d031eb2151fb0411f031e0001000f
031f000102ca02d00015001f02d302d5000d001f02cf02d0000d001f02cb
02d0000d001f02cd02d0000d001f02ce02d0000d001fffc002d0b3090c32
40b802d2b3090c32e0411c02e50001005f02dd009f02e5000202bb02c300
30001f02da02b80032001f02d902b9003f001f02d802b80064001f02b902
b80033001f02bab221c81fb802b8b321c81f40b8039bb20d1632b9ffc002
c3b22b2f32b9ffc002c3b21f2532b9ffc002c3b2171b32b9ffc002c3b212
1632412502c202c1001c001f02d702c10024001f02c102c00022001f02bf
02c00018001f02c0027400c8001f02b50235003b001f02b40235003b001f
02c402bc001e001f02b702b60038001f02b3b20ec81fb802b0b207c81fb8
02afb206c81fb802aeb200c81fb802afb2502f1fbc02ae02ab001a001f02
adb2261a1fb802a8b326241f0fbb0235000102a50274b21d1f12410a02a1
015801f4001f02a000d801f4001f001202a2b237c81fb80290b2bc201fb9
029002904018374025402d40a6033025302d30a6032025202d203720a620
4110028e0005009f028b0001028b028b0037002002890030028900400289
00900289b20437b041fd027400c0027400020080027400a0027400020060
0274007002740002000002740010027400020080027400f002740002003f
0285004f028500020090027e0090027f009002800090028100040090027a
0090027b0090027c0090027d000400900274009002750090027700030070
027e0070027f007002800070028100040070027a0070027b0070027c0070
027d000400700274007002750070027700030060027e0060027f00600280
0060028100040060027a0060027b0060027c0060027d0004006002740060
02750060027700030050027e0050027f005002800050028100040050027a
0050027b0050027c0050027d000400500274005002750050027700030040
027e0040027f004002800040028100040040027a0040027b0040027c0040
027d000400400274004002750040027700030030027e0030027f00300280
0030028100040030027a0030027b0030027c0030027d0004003002740030
02750030027700030020027e0020027f002002800020028100040020027a
0020027b0020027c0020027d000400200274002002750020027700030010
027e0010027f001002800010028100040010027a0010027b0010027c0010
027d0004001002740010027500100277000300e0027e00e0027f00e00280
00e00281000400e0027a00e0027b00e0027c00e0027d000400e0027400e0
027500e00277b103d041c5027e00d0027f00d0028000d00281000400d002
7a00d0027b00d0027c00d0027d000400d0027400d0027500d00277000300
30027400400274000200c0027e00c0027f00c0028000c00281000400c002
7a00c0027b00c0027c00c0027d000400c0027400c0027500c00277000300
b0027e00b0027f00b0028000b00281000400b0027a00b0027b00b0027c00
b0027d000400b0027400b0027500b00277000300a0027e00a0027f00a002
8000a00281000400a0027a00a0027b00a0027c00a0027d000400a0027400
a0027500a0027700030090027e0090027f00900280009002810004009002
7a0090027b0090027c0090027d0004009002740090027500900277000300
20027e0020027f002002800020028100040020027a0020027b0020027c00
20027d00040020027400200275002002770003028101580801001f028001
290801001f027f00ec0801001f027e00d80801001f027d00b10801001f02
7c00a60801001f027b00820801001f027a00370801001f02770026080100
1f027500200801001f0274001f0801b21f370f41160235004f0235005f02
35006f0235009f023500af023500bf0235000700af023500cf023500df02
3500ff02354022040f074f079f07af07bf0705af07e007020f064f069f06
af06bf0605af06e0060220411b020d0001005f02350001008f0235000100
7f023500ef02350002002f0235003f02350002003f0234004f0234000202
350235023402344011ed20ef2a01cf2a01bf2a01af2a018f2a0141090247
0104001e001f022000370201001f0158400c263e1fd8263e1f3726273e1f
b8028eb6ec171fb226361fb801bcb226361fb80129402b26361fec26361f
b126361fa626361f8226361f3726361f3226361f2d26361f2526361f1f26
361f37262a1fb801584022263e1fd8263e1fbc263e1f27263e1f21263e1f
20263e1f3700161600000012110840b9020d01a6b3c50d0009b801bcb227
281fb801bbb227301fb801b8b2274f1fb801b7b227621f410901b6002701
01001f01b5002002ab001f01afb21fe41fb801adb21fe41fb801acb21fbb
1fb801a8b21f341fb8015db2272e1fb8015bb227cd1f410d0155001f0401
001f0154001f0401001f0153001f0201001f0152b21f561fb80151b21f29
1fb8012bb227261f410d012a00270125001f0129015800e4001f0125001f
0401001f0124b21fe41fb80123b21f3b1fb80122b21f391f410d01080027
0801001f0106002d0101001f0105001f0101001f0103b31fbb1fefb90158
0401400b1fed1f931fec1fe41feb1fb80201b21fd920b80401b21fcf25b8
0156400a1fbc2d9e1fbb1f411fb2410a01580401001f00b101580401001f
00b001580401b51fa625891f9bb901580125b61f991f2e1f8e2db80801b5
1f8d1f291f89b901580401b21f8220b802ab40131f801f301f742de41f73
1f4a1f611f521f5d25b802abb21f5c1fbc0801001f0059015802abb61f50
25891f491fb80125b21f4725b80401400b1f461f791f401f271f3920bc02
ab001f003801580401b21f372dbc0125001f003201580125b61f2c1f341f
2a25b80801b21f5537b80111402a07f00790075b0742073b07230722071e
071d071408120810080e080c080a080808060804080208000814b8ffe040
2b0000010014061000000100060400000100041000000100100200000100
0200000001000002010802004a00b013034b024b5342014bb0c063004b62
20b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52
b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ffb101
018e851bb0124358b10100858d1bb900010119858d5959001816763f183f
123e113946443e113946443e113946443e113946443e11394660443e1139
4660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b182b1db096
4b5358b0aa1d59b0324b5358b0ff1d594bb08153205c58b9020f020d4544
b9020e020d45445958b90470020f455258b9020f04704459594bb0e45320
5c58b90020020e4544b90027020e45445958b908420020455258b9002008
424459594bb8012553205c58b90026020f4544b90021020f45445958b90a
0d0026455258b900260a0d4459594bb8040153205c58b1d8204544b12020
45445958b9250000d8455258b900d825004459594bb8040153205c58b901
5800264544b1262645445958b923200158455258b9015823204459594bb0
2953205c58b11f1f4544b12d1f45445958b9010d001f455258b9001f010d
4459594bb02f53205c58b11f1f4544b1251f45445958b90135001f455258
b9001f01354459594bb8030153205c58b11f1f4544b11f1f45445958b914
28001f455258b9001f14284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b01b331757ec3456523
456023456560234560b08b766818b080622020b17e754565234520b00326
6062636820b003266165b075236544b07e234420b131c34565234520b003
266062636820b003266165b0c3236544b0312344b100c3455458b1c34065
44b23140314523614459b33f3c5841456523456023456560234560b08976
6818b080622020b1583c4565234520b003266062636820b003266165b03c
236544b058234420b13f414565234520b003266062636820b003266165b0
41236544b03f2344b10041455458b141406544b23f403f45236144594569
5342014b5058b108004259435c58b108004259b3020b0a124358601b2159
421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d
2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b2b2b
2b2b2b2b2b00b01243584bb035514bb021535a58b1262645b04061445959
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b737373737345b040614418
004569444569447373737473737374737473742b2b2b2b2b2b2b2b2b2b2b
2b0073737373737373737373737373737373737373737373747474747474
7474747474747474747474747474747575757374757575752b7300004bb0
2a534bb036515a58b1070745b040604459004bb02e534bb036515a58b103
0345b0406044b1090945b8ffc06044592b4569440174007373732b456944
2b012b435c58400a0006000702a006a00702b9ffc00274b31a1d326fbd02
77007f02770002ffc00277b22f3132b9ffc00277b322253240b80274b32f
353240b80274b3282a3240b80274b21a2132b8ffc0b3371a1d32b8ffc0b3
251a1d32b8ffc040112d1a1d329025902d9037a025a02da03706b8ffc0b6
a61a1d321fa61fb8028eb22fa60300742b732b2b2b2b2b2b2b2b742b7374
59002b2b435c58b9ffc002a1b21c1d32b9ffc002a0b21c1d322b2b592b73
012b2b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b
2b2b73742b2b2b2b2b2b2b2b73732b2b2b2b2b2b732b732b2b2b742b2b2b
73737373732b73732b2b2b732b2b002b2b2b2b7374732b732b2b2b2b752b
2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b2b7373732b2b2b73
2b737374752b2b7374752b2b7374752b2b2b2b2b2b2b2b2b2b2b2b74752b
000000>
[6841 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> TFWPMX+Arial-BoldMT AddT42Char 
1 108 2 <00010095000004f005ba000b0090403d08050407082506121f05013005af
05020505090304250201020a09250b000807064b0302480a000b010b1a20
0d300d400d030d04092001200030000200b8028bb30c3153182b4e10f45d
3c4dfd3c4e105df65d3c4df43cf43c003f3cfd3c3f3cfd3c11392f5d7143
5c58b90005ffc0b21d3905b8ff80b21a3905b8ff80b113392b2b2b593cfd
3c0305103c3c313033112115211121152111211595043ffce902e0fd2003
3305baf8febbf7fe71f7>TFWPMX+Arial-BoldMT AddT42Char 
1 298 3 <000100910000061905ba000c0218400b0b032608260b0304030103b8ff80
40091c3a340a203a3b3409b8ffe0b33a3b3409b8ffe040a41c2e340a201c
2e340609080ae309ec0a0404090a0a13021c0410091f0a23022c0420092f
0a6702680465096a0a77027804a409aa0ab509ba0af609fa0a169f049009
9f0ac609c90ad702d804d609d90ae702e804e509ea0a0d7709780a83028c
0483098c0a900207580b65026a046709680a760279040744024b0444094b
0a57085709580a07180a2f0e34023a0434093b0a3f0e0703020c04060909
0a15021a04170907b10602435458401f0204030a09050c070732060e0c32
0000031003020850080d340b50080d3403b8ff80400e0b0d3408400e2734
0b400e273403b8ff9c40100e2734030b08030100040102070a0008003f3c
3c3f3c111217392b2b2b2b2b2b5d012fed10d4ed111217391bb8ff3b402d
030a09200408090932030414030304020b0a0a320302140303020b080303
0c0402020c0a0a090907081f0e010eb8010db307060504ba02380005ffc0
b35b5d3405b8ffc0401753543405320740077f080108bd7f030103bd0b20
0b0c02b802384012010000405b5d34004053543400321f0c010cb8010db3
0d3175182b10f471ed2b2b103cee103c1a1910fd71fd713c1a1810fd2b2b
ee103c10e471003f3c103c103c3f3c12173987052e2b877dc4872e182b87
7dc42b593130014bb0135358b90008ffe0b10b20383859015d5d5d5d5d5d
71722b2b2b2b002b715d331121010121112111012101119101bb010a0107
01bcfeedfeddfee3fede05bafc1803e8fa460482fb7e0482fb7e>TFWPMX+Arial-BoldMT AddT42Char 
1 2080 6 <00020049ffe8042e043e0023003201714068071a081c051d161a4a1b481c
4925db10df11093619461957266619672686269219931aa61ab91bc71ac8
1b0c06060d151606191627062915591977028602a606b506c6060cbf34d9
10021d243231112c0d24402b2e3424402228342440191d346f24fc240224
461db8ffc040300e0f343d1d01001d101db01df91d041d1d2c013300400e
0f340f001f0002005521401c113f21401b103f2140181a3421b80274b504
070c0d0a2cb8ffc0b31c113f2cb8ffc0b31b103f2cb8ffc0b3181a342cb8
02744040140b1e3126082909280d591f0c9f0c021f0c01ff0c010c400e16
340c1a4f340134600001008e300101013329215f1701df17014f175f176f
17031719336941182b4e10f45d71724dedf471ed5d4e105df62b5d71724d
edf4e4fd3c003fed2b2b2b3f3c3ffd2b2b2bf45d2be412392f5d712bb106
02435458b22f1d017159edb10602435458b90024ffc0b71b1d3454246424
025d2b595d2b2b2b111239030e103c3c3c313001715d005d710127363633
321616150314161721262726270606232226353436363736373534262322
060106060706151416333237363736350165ff2bd2cfbcb84b031b25feea
0b10070348a45da4bd569b92c54c506f4b54015e36ea243758444c453310
0b02e22e9a945989b7feb88c854c1c3719084646b2885a8d4b1c25201c51
453bfed2123218273c3b563226372465>TFWPMX+Arial-BoldMT AddT42Char 
1 2606 7 <00020087ffe8049405ba000f001c009db90012fff840310b39371b471b02
125606560a56165618591cf7070635043b0d3b13351b45044b0d4b13451b
940799090a0c0e010201001ab80274b2050714b8027440130b0b0f000a17
21081a701e011e10290203260fb80129400c01700080000200191d3f4118
2b4e10f4713c4dedfd3ce64e1071f64ded003f3c3fed3fed3f3c31300071
5d015d4358400b6606660a66166618691c055d59005d2b33112111363332
1211100023222627151314171633323635342623220687011982b2c2fefe
fdb95bb140123449795d838467658605bafdf094fee7fef9fef0feda5b59
9c022aa54f709fabb6a19d00>TFWPMX+Arial-BoldMT AddT42Char 
1 2858 8 <00010055ffe8043f043e001900e14051580f59125916680f691269167d18
79199702970cc610c618d710d618e906e908e913e915f80613381338154a
124a164618590c690c073a1237163718037705770f8705860f8919a812a7
16b912b616090eb8ffc0b3181b340eb8ffc0b51214340e330db8ffc0b319
1e340db8ffc0b30f11340dba0104000a02744012110b0040181b34004012
1434003390010101ba0101000402744020170701401214340121002f0d40
1214340d214f0e010e1a1b072114191a5841182b4e10f44ded4e10f65d4d
ed2bf4ed2b003ffdf45de42b2b3ffdf42b2be42b2b3130005d7101715d01
052626232206151416333236370506062322001110003332160431feeb0e
634f697d7f6b50661501142bf4cde9feeb0116edc2e502ec32535491aabd
9c5b6f2fbec20126010401070125a700>TFWPMX+Arial-BoldMT AddT42Char 
1 3174 9 <00020041ffe80427043e0014001c01a3b90010fff840460b3999099a0d96
10a805a70abb09bb0db81a0808140148024706460a4f1ea80db606b61ac7
0ac80cd60ad80cf807f70d0d1c0f1c15401b1d3415400e11340f15bf15cf
150315b8ffc0b30f1e3f15b8ffc0b30e173f15b8028d400c0f0e12500e60
0e020e181201b8ffc0b6191b3401331200b8ffc0b31d203400b8ffc0b322
293400b8ffc0b32b2d3400b8ffc0b3181c3400b8ffc0400f0e0f34a00001
0000100002005f1212b80274b3040b1218b8027440240b070021012f1521
4f0e010e1a2f1e5f1e6f1e9f1e041e0f2108400d0f3408191d6941182b4e
10f42b4ded4e105df65d4dedf4ed003fed435c584014184028143f18401e
0f3f18401b103f18401c113f2b2b2b2b593ffd435c58b90012ffc0b32814
3f12b8ffc0b31e0f3f12b8ffc0b31b103f12b8ffc0b21c113f2b2b2b2b59
f45d712b2b2b2b2b435c58b90000ffc0b2123900b8ffc0b2173900b8ffb0
b3090a3e00b8ffc0b241213f2b002b2b2b59e42b1112395d435c5840140e
400f1e3f0e401c113f0e401b103f0e400e173f002b2b2b2b592f3cfd2b2b
722b2b3c0111333130015d71005d2b010506062320272635100033320003
211616333236132626232207061702fa011836e9affeeb85690114d3ed01
1206fd40038261425a270378565c3c3c0101522f9aa1b591dd0108012bfe
c7febd7d8b48016c7a7f43437300>TFWPMX+Arial-BoldMT AddT42Char 
1 3954 11 <00020093000001ac05ba000300070077b90009ffc0403f110a3f40095009
028009b009c009d009ef09051f0960097f09a009b0090503060700050403
0f00014000d000e00003005d02010006050607040a0207260104b8ffc040
092124340419083f3c182b4e10f42b3c4dfd3c003f3c3f3c3f3cfd5d713c
0305103c3c103c3c313001715d722b1311211101112111930119fee70119
04b60104fefcfb4a0426fbda>TFWPMX+Arial-BoldMT AddT42Char 
1 4116 12 <000100890000045f05ba000b00f3b90003ffddb30d113f03b8ffc0407d19
2d3407031003130627096606af0abf0ac809cb0ada0a0a53036003020d07
180946065708760605b609df04ed04fc04f506054e074e0866067d048c04
9b049c059a069a079a080a1f0412062b042b052a062a072a082f0d4b044b
050a060607090a09080a050a090306040b050406020100000b0b08070a03
0a0a0b04b8026d401a052f08391f070107650d020b26018000011f000100
190c3f7b182b4e10f45d713c4dfd3c1910f67118edf4ed103c103c003f3c
3c103c3f3c3f3c12173987087d10c4083cb10602435458b90003ffc8b209
2134002b593130015d5d5d7100725d2b2b33112111012101012101071189
01190149015afe950185fed1fef58305bafcf60176fe7cfd5e01dd89feac
>TFWPMX+Arial-BoldMT AddT42Char 
1 4416 13 <00010093000001ac05ba00030053b90005ffc04029110a3f400550050280
05b005c005d005ef05051f0560057f05a005b0050502010003000a020326
0100b8ffc040092124340019043f3c182b4e10f42b3c4dfd3c003f3c3f3c
313001715d722b3311211193011905bafa46>TFWPMX+Arial-BoldMT AddT42Char 
1 4524 14 <0001007e00000698043e0027013bb90029ffc0405d110a3f0506060c1506
160c340334083418342344024508451844230c20032f295309602980299f
29a406a707a60cb506b50cb029d029e0290e00292f2950299f29bf29df29
0629401a1c343f2950298029d029e02905072104071a1d16b80274b20a07
21b80274401e0407101111271b1c1c26270a0100060f10261211405a3560
11016f110111b80246400f1a1b261d1c405a356f1c01601c011cb80246b4
2526262701b80129b2000027b8ffc0b30f093f27b8ffc04036110a3f2740
5a352740413527403c35274024273427403a3d342f27cf27df27030f271f
27802703002720273027ff2704271928e33c182b4e10f45d71722b2b2b2b
2b2b2b3c4d10ed10fd3cf65d712b3cfd3cf6715d2b3cfd3c003f3c3f3c3c
103c103c103c3fed3fed0111123900111239313001722b715d005d012b13
211536333216173636333216171615112111342726232206061511211134
2626232206061511217e01038bc066963046a25c75a2281dfee71d27513b
682efee71e3f3641682dfee7042691a9545555545f5c4498fd59025f9e2e
3c488b96fe0202469b5a2c468499fdfc>TFWPMX+Arial-BoldMT AddT42Char 
1 5200 16 <0002008bfe6c0497043e0010001c009a402e3813481302123403390d3913
341b4403490d4913441bf91b095606560a591256165618591cf607f91b08
0100061ab80274b2050714b8027440160b0b100f0e1721081a701e011e11
290e0e0f26101001b80129400b700080000200191d3f41182b4e10f4714d
ed3c10fd3c10e44e1071f64ded003f3c3fed3fed3f3c3130015d005d0143
58400d6606660a691266166618691c065d59005d13211536363332001110
002322262711210114163332363534262322068b010633ae6ab90102fefc
b9588f4ffee701168e6662828663678804269c5064fedefefdfef6fed946
55fde903b9b3ab9db3a7a29f>TFWPMX+Arial-BoldMT AddT42Char 
1 5452 17 <0002005bfe6c0462043e0011001d009d4037123c02340d34143c1c4a0244
0d44144a1c08701f011d081517345905590a570d56135917591a561da60a
a61cf809f60df7140c11000e1bb80274b2040b15b8027440130b070f1006
182108191e12290101002611110fb8012940098f1001101a1f583c182b4e
10f6714ded3c10fd3c10e44e10f44ded003f3c3fed3fed3f3c3130015d2b
71005d014358400d6905690a661369176919661d065d5901110606232227
2611100033321617352111013426232206151416333236034937a45fb575
8a0103c06a9b3c0103fef08564668984616192fe6c02164753889f011001
00011f5a5b9dfa4603b4a39fa2b0af9bae00>TFWPMX+Arial-BoldMT AddT42Char 
1 5710 18 <0001008700000337043e001000a84028970501090e01530566057505032f
12580e680e7012040a090f0c1f0c028f0cff0c023f0c4f0c020cb8027740
29070701000a0302060a28000910093009700904091a7f129f12025f127f
12af12d01204121000260103b80129400b02028001a001020119113fb901
1c00182b4e10f4713c4d10ed10fd3c4e105d71f65d194de400183f3c3f3c
3fed5d717239323130015d005d71004bb017534bb035515a58b10a323859
005d212111211536363332170726232206061101a0fee70105436b446059
57473d3b522f0426976b4435f52e41aafef1>TFWPMX+Arial-BoldMT AddT42Char 
1 5938 19 <0001001fffe80291059d001900cd402920002001230a290f3a0e4a0e590f
07191500180316150017121314011712021401180309070a070c18b80101
400f0017a017b017036017a017c0170317b80104b2150114b80274b30015
0607b80274400e0c0b092f0a2f00002f015f010201b80104402818032617
1255153f149f14af1403601480149014d014f01405001410142014301404
14191a78a0182b4e10f45d71724bb037534bb03b515a58b90014ffc03859
3c4dfc3cfd3cf45d3c10f419e400183fed3f3cfd3c10f45d71e411123911
330f0f0f0f3130015d011523111416163332371706232226262726351123
3533352511027ac00b271c274a18627c4c7a390b098181011a0426e0fe54
822b1c1bda2a335145319501cfe0d3a4fe89>TFWPMX+Arial-BoldMT AddT42Char 
1 6226 20 <0001008dffe8045304260016009c401757116711960503090619063c023c
114b024b11e702070fb802744011040b16000a1514140a09061314261515
00b80129400e1640202434af1601ff1601161a18b8ffc040162224349018
a018027018f01802ef1801180a0b260908b8ffc0400f202434a00801f008
010819173f3c182b4e10f471722b3c4dfd3c4e105d71722bf671722b4ded
3c10fd3c003f3c3c103c3f3c3fed3130005d015d21350606232226263511
21111416163332363635112111034e3abd696baa4c01191f523f48722a01
199f55625eaa9602a0fe18e0653b4f75e401c0fbda00>TFWPMX+Arial-BoldMT AddT42Char 
1 6458 21 <0001000efe510452042600130134b41228050113b8ffe040180c0f340816
0d0f3407160d0f3406160d0f3405160c0f3402b8ffc0401f1a3a34050606
040d0b0e061002001306041302040303010100061360100110b801af4012
0b0f0d2f0e280020153015601503f0150115b8ffc0b322263415b8ffc040
121c1e341517171a043903401819347f030103b80127400902401819347f
020102b801274012013900401c36342000300002001914c4a0182b4e10f4
5d2b4dfd19f45d2bf45d2b18fd4e456544e62b2b71724d10f4e4003fed5d
2f3f3c103c103c0112391139001112391239391139070e103c3130002b01
2b2b2b2b2b5d4bb010534bb03a515a58b2041000bafff00001fff0b10310
013838383859435c58b90005ffe8400e0d113f131013193f131012183f05
b8fff0b313193f05b8fff0b212183f012b2b2b2b2b59132113132101070e
032322272716333236370e012bfef80123fe89432543577f50514e194235
625e190426fd0e02f2fc02b95d623d2211dc0d735900>TFWPMX+Arial-BoldMT AddT42Char 
1 0 0 <00020100000005000500000300070042b40201fe0607b8023f4013000504
fe03000a0704fe010019080605fe0203bc0126000901b0011800182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>TFWPMX+Arial-BoldMT AddT42Char 
TFWPMX+Arial-BoldMT /CharStrings get begin
/space 1 def
/E 2 def
/M 3 def
/a 6 def
/b 7 def
/c 8 def
/e 9 def
/i 11 def
/k 12 def
/l 13 def
/m 14 def
/p 16 def
/q 17 def
/r 18 def
/t 19 def
/u 20 def
/y 21 def
end
TFWPMX+Arial-BoldMT /Encoding get
dup 32 /space put
dup 69 /E put
dup 77 /M put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/GSVBEA+Arial-BoldMT /TFWPMX+Arial-BoldMT findfont ct_VMDictPut/GSVBEA+Arial-BoldMT*1 [32{/.notdef}rp /space 36{/.notdef}rp /E 7{/.notdef}rp /M 19{/.notdef}rp /a /b /c /.notdef /e 3{/.notdef}rp /i /.notdef /k /l /m 2{/.notdef}rp /p /q /r /.notdef /t /u 3{/.notdef}rp /y 134{/.notdef}rp]GSVBEA+Arial-BoldMT nfGSVBEA+Arial-BoldMT*1 [18 0 0 -18 0 0 ]msf338.373 87.6041 mo(Marketplace )[14.9939 10.0116 7.00577 10.0116 10.0116 5.99387 10.9943 5.0004 10.0116 10.0116 10.0116 0 ]xshGSVBEA+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf242.69 312.598 mo(Equilibrium )[10.6721 9.77266 9.77267 4.44479 4.44482 4.44479 9.77267 6.22733 4.44479 9.77267 14.2273 0 ]xsh254.671 331.598 mo(capacity )[8.8992 8.8992 9.77267 8.8992 8.8992 4.44479 5.32788 8.8992 0 ]xsh[2 6 ] 0 dsh
271.318 234.331 mo
271.318 291.034 li
@
271.318 293.019 mo
266.954 285.538 li
266.676 285.061 266.837 284.448 267.314 284.17 cv
267.791 283.892 268.404 284.053 268.682 284.53 cv
271.318 289.049 li
273.954 284.53 li
274.233 284.053 274.845 283.892 275.322 284.17 cv
275.799 284.448 275.96 285.061 275.682 285.538 cv
cp
ef
GSVBEA+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf350.789 320.747 mo(Equilibrium price )[10.6721 9.77267 9.77267 4.44479 4.44479 4.44479 9.77267 6.22733 4.44479 9.77271 14.2273 4.44482 9.77267 6.22733 4.44479 8.8992 8.8992 0 ]xsh1 lw
[4 3 ] 0 dsh
249.8 345.755 mo
570.104 345.755 li
570.104 391.8 li
249.8 391.8 li
cp
@
%ADOBeginSubsetFont: TFWPMX+Arial-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBEA+Arial-BoldMT gcheck setglobal} if
1 894 4 <0001004affe604f205d3002c01d0403db911b81db628c62c040713071517
131715182b650565287406780d7428d90cd6230c590a550e55225923680c
661267216928672c771d861d96210c1223b8ffe0b31e1f3423b8ffe04065
191a3451225123c122c123047122712381228123e122e123062b0a2a0d24
222423390d34234b0a4b0d442243236a0d6523790d7a22890d8a22a60aa7
0da82213090a090d06220623190a190d16220722230a0d04011756184019
20346f18016f189f180218ba0265001bffc0400c1a391f1b011b2d140300
4801b8ffc040491a203430014001500160019001a001b001c0010801ee04
401a39100401042d2a0918efff17011740131734174b0727261a2e1f27a0
10b01002104b01ef11200030000200192dd253182b4e10f45d4b5358b100
4038594dedf45ded4e10f64dedf42b72ed003ffd712bf45d2be43ffd712b
f45d722be41217395d5d71722b2b435c58b90022ffe0b31b1d3e23b8ffd0
b31b1d3e23b8ffe3b2133922b8ffe0b2133923b8ffc9b2123922b8ffd040
0f12390d2012390a2012390a200f3922b8ffe8400e0c390d200d390a180d
390a1813392b2b2b2b2b2b2b2b2b2b2b2b2b59b1060243545840153a0a3a
0d352235234b0a490d43224623a60aa9220a005d593130005d71015d1325
161633323635342627262726272635343636332004170526262322070615
141716041616151406042320004a01201a9f878f913d4c34b9ee60877fef
a90114011707fed8137d7d81492f2c3801b0cf758cff00bffeeafed601dd
1c9188795134491b122e3b5679ae70c366f2ca0d716335223934252f666d
bd8b7edc6b010100>GSVBEA+Arial-BoldMT AddT42Char 
1 1502 5 <000100070000078b05ba000c01ff40122b032b06200b330b040006010b40
1a3a3406b8ff80b31a3a3403b8ff80b31a3a3403b8ff80b2193509b8ffe7
40091a1d340a191a1d340cb8ffe740091a1d3400191a1d3405b8ffe04059
161d340420161d340709090a060c1a0015092900250907e90ae70cf709f9
0af70c05c705c90ac70cda00d409d90ad60cea00e50909ab04a305ab0aa5
0cbb04b305bb0ab50cc804092e0422052f0a200c9b0493059b0a950c08b1
0602435458b408010e0d06b8ffc0b30e213403b8ffc040090e21340b400e
213406b8ff9cb3080d3403b8ff9c4015080d340b64080d34030b06030001
07040102090008003f3c3f3c3c111217392b2b2b2b2b2b01111239391bb4
c20b040520b8ff30b3060a0920b8ff32405c03000c200003020220010014
0101000a060505320b0a140b0b0a0906070720080914080809040b0c0c32
0304140303040b0603030c000201040c03050a0b07090806080707050504
04020201020c0a0a090900080e17171a2f080108b80130400a2006bd0bbd
402f030103b80130400c20200130010201190d5e63182b4e10f45d1a194d
fd5d1a18fdfd1a19fd5d184e456544e6003f3c103c103c3f3c103c103c10
3c103c01111239391239391139391239390011173987054d2e2b877dc487
2e182b877dc4872e182b877dc4872e182b877dc42b2b2b593130015d5d5d
5d712b2b2b2b2b2b002b2b2b2b715d210121130121011321012101010165
fea2012fdd010c01600101e1012afe9cfec6fedcfedd05bafc1103effc00
0400fa460448fbb8>GSVBEA+Arial-BoldMT AddT42Char 
1 3698 10 <00010018000002e605d3001600b840323604012a04201020115904801805
0804bf180215161102141216110e130f00100e13010010021409080f0b01
5f0bff0b020bb80274400a0601110f1601ff160116b80274401e10000001
f00001000613140a09333f084f085008030828102f115f110211b8010440
0d0e132602145f00a016c0160216b8ffc0b6090c3416191778b902690018
2b4e10f42b713c4dfc3cfd3cfc5d3cf45d19e400183f3c3f5d713cfd5d71
3c3ffd5d7139320f0f0f0f313001715d005d133335343636333217072623
2206151533152311211123189c399975787326433e3d35d2d2fee79c0426
5086845324c41039514bddfcb7034900>GSVBEA+Arial-BoldMT AddT42Char 
1 4960 15 <00020052ffe8049a043e000d001900974048e801e708f713f71504c702e8
05021219051909025910561356165918970298069808970cb809d502db05
dc09d50ce705e706e80d10a708cb02cc06c308c60c057508890684080311
b80274b20a0b17b80274401404071439071a601b701b021b0e2100191a58
41182b4e10f44ded4e1071f64ded003fed3fed313000715d015d71435840
09691066126616691804015d59005d015d13341236333200151400232224
26251416333236353426232206528afd9cf10134fec9ec92fef78a012096
6e6e95956e6e9602228c01068afec7eff1fec384ffa89ea8a8a09ca8a800
>GSVBEA+Arial-BoldMT AddT42Char 
GSVBEA+Arial-BoldMT /CharStrings get begin
/S 4 def
/W 5 def
/f 10 def
/o 15 def
end
GSVBEA+Arial-BoldMT /Encoding get
dup 83 /S put
dup 87 /W put
dup 102 /f put
dup 111 /o put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBEA+Arial-BoldMT*1 [32{/.notdef}rp /space 36{/.notdef}rp /E 7{/.notdef}rp /M 5{/.notdef}rp /S 3{/.notdef}rp /W 9{/.notdef}rp /a /b /c /.notdef /e /f 2{/.notdef}rp /i /.notdef /k /l /m /.notdef /o /p /q /r /.notdef /t /u 3{/.notdef}rp /y 134{/.notdef}rp]GSVBEA+Arial-BoldMT nfGSVBEA+Arial-BoldMT*1 [16 0 0 -16 0 0 ]msf355.645 365.355 mo(Social Welfare)[10.6721 9.77271 8.89917 4.44482 8.8992 4.44479 4.44479 14.8128 8.8992 4.44479 5.32788 8.8992 6.22729 0 ]xsh%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 560 5 <0001007200ed043a04b6000b0038401f006e0902f908036e050706096e0a
040af905016e3f024f020202190c575a182b4e10f45d4df43ced3c10e43c
3c002ff43cfd3cf431302511213521113311211521110201fe71018faa01
8ffe71ed0192a8018ffe71a8fe6e>GSVBDY+ArialMT AddT42Char 
1 664 6 <000100aafede018300cd000a004eb50a030007ab06b80150402601033c02
02010a013c000a020301033c000638073a4f005f006f007f00a0000500a0
0ba198182b10f45df4e410ed3c103c003fed3c103c10ed10fded01111239
31303335331514060727363637b6cd505732393603cdcd718b264d19615b
>GSVBDY+ArialMT AddT42Char 
1 784 7 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>GSVBDY+ArialMT AddT42Char 
1 854 8 <000100df000002fb05c0000a00af402003400d11346b047f028f02990804
ac04010900060502030905010c0201ca0a00b8ffc0400a21233430000120
000100b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d
0d025500b8fff040190f0f065500100c0c065500100d0d0655001a0c0540
0d0f3405b8ffc0400e212334300501200540050205190bba013c01850018
2b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f173901
11393130015d005d2b212311060607353636373302fbb441d35497e22f74
047b3e7c1fae47ca5f00>GSVBDY+ArialMT AddT42Char 
1 2750 13 <0001009c0000051f05ba0009017db1120bb8ffc0400a13153408180c1602
5503b8ffe840210c16025508020303200708140707080207030308090402
02090708040320060605b8ffecb40f0f025505b8fff2400b0d0d02550512
0c0c025505b8fff7401a0b0b0655055d200b01200b500b600b700b800b05
0b0809200100b8ffc0400d13153420000100201010025500b8fff6b40f0f
025500b8fff6b40d0d025500b8fffa400b0c0c025500040b0b065500b8ff
f7b40c0c065500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b2b
2b2b5d2b3cfd3c105d71f42b2b2b2b3c10fd3c003f3c3f3c123939011139
3987042e2b877dc4b10602435458b90003ffe0b70c113408200c1134002b
2b5931302b2b012b435c58b40840463903b8ffc0b646390840323903b8ff
c0b632390722193902b8ffdeb619390722323902b8ffdeb6323907222339
02b8ffde400b2339070e1439070e133902b8fff4b61339070e1d3902b8ff
f4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b2b2b00
2b2b2b2b59331133011133112301119cc70302bac7fcfe05bafb81047ffa
460480fb8000>GSVBDY+ArialMT AddT42Char 
1 4120 16 <000100a1ffe7052205ba001400d9400a260f58045808c9080416b8ffc040
1613153434043b0846044a08760fa605e80f070c000211b802bbb4060914
2602b8ffecb40f0f025502b8fff2400b0d0d025502100c0c025502b8ffe0
401c0b0b0655025d201601201650160260167016801603160d26200a010a
b8ffc0400a1315340a20101002550ab8fff6b40f0f02550ab8fff6b40d0d
02550ab8fffa400b0c0c02550a040b0b06550ab8fff7b40c0c06550ab8ff
f8400a0d0d06550a5d153b59182b4e10f42b2b2b2b2b2b2b2b5ded4d105d
5d71f62b2b2b2b4ded003fed3f3c3130015d2b005d013311140204232224
0235113311141616333236110460c264fefbd4cefefa70c247ad7dd6b605
bafcb1ddfefca38e010de9034ffcb2bfb562c2011400>GSVBDY+ArialMT AddT42Char 
1 4412 17 <000100190000077605ba001801db40262900261129122618390036113912
361849004711491247185800571158125718109808980f02b10602435458
403310011a192b153405340c4405440c4b155405540c5b156405640c6b15
7405740c7b150f05150c030001120800080f0208020102003f3f3f3f3f11
1217395d01111239391b401e030405050206070808050a0b0c0c090d0e0f
0f0c14131212151617181815b8ff3cb305001820b8ff3cb30c121120b8ff
3c405a150809200005020220010014010100180508081e15181415151812
0c09091e151214151512110c0f0f2010111410101112090c081815050f11
100c000205150c050318100f0f0909080802020102181212111100081a17
171a10410901510020000c015100150151004000050151b6202001010119
19b8018bb1a8182b4e10f45d1a194dfd1a18fdfd1a19fd184e456544e600
3f3c103c103c3f3c103c103c103c103c1217390112393911123939111239
39113939874d2e2b877dc4872e182b877dc4872e182b877dc4872e182b87
7dc42b2b2b870e10c4c4870e103cc4870e10c4c4870e10c4c4870e10c4c4
870e10c4c4014bb00f534bb011515a58b2120a18b8fff6383859014bb025
534bb02a515a58b90000ffc03859004bb00b534bb00e515a58b30c400540
38385959313001725d210133131617363701331312173637133301230126
27060701019efe7bc7df241a380a0117ead24f231c2de6c3fe6ebbfecb27
071714fec905bafc3f9795eb2403defd1afeecf38bb403aefa46045d8c20
6547fba3>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/plus 5 def
/comma 6 def
/hyphen 7 def
/one 8 def
/N 13 def
/U 16 def
/W 17 def
end
GSVBDY+ArialMT /Encoding get
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 49 /one put
dup 78 /N put
dup 85 /U put
dup 87 /W put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /comma /hyphen 3{/.notdef}rp /one 11{/.notdef}rp /equal 6{/.notdef}rp /D 8{/.notdef}rp /M /N /.notdef /P 2{/.notdef}rp /S /.notdef /U /.notdef /W 9{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 3{/.notdef}rp /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /x /.notdef /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [16 0 0 -16 0 0 ]msf464.73 365.355 mo( )sh257.116 384.355 mo(W = p*x* - c\(x*\) + U)[15.1008 4.44479 9.34399 4.44482 8.89917 6.22733 8 6.22733 4.44479 5.32788 4.44482 8 5.32788 8 6.22729 5.32788 4.44482 9.34399 4.44479 0 ]xshGSVBDY+ArialMT*1 [10.6667 0 0 -10.6667 0 0 ]msf396.694 388.355 mo(1)shGSVBDY+ArialMT*1 [16 0 0 -16 0 0 ]msf402.626 384.355 mo(\(x*,p*\) + )[5.32788 8 6.22733 4.44479 8.8992 6.22733 5.32788 4.44479 9.34399 0 ]xsh%ADOBeginSubsetFont: RJOBAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /RJOBAA+ArialMT
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000006546670
676d00000000000007100000066e676c796600000000000019ec00000092
686561640000000000000d8000000036686865610000000000000db80000
0024686d74780000000000000ddc000000086c6f63610000000000000de4
000000066d6178700000000000000dec000000206e616d65000000000000
0e0c00000020707265700000000000000e2c00000bbe6764697200000000
000000000000000005ba001905ba001a05a70019042600180000ffe70000
ffe80000ffe7fe69ffe805ba0019fe69ffe802ea000000b8000000b80000
000000a800ad016900ad00bf00c201f0001800af00b900b400c800170044
009c007c009400870006005a00c80089005200520005004400940119ffb4
002f00a1000300a100cd00170057007e00ba00160118ffe9007f008503d3
00870085000d002200410050006f008d014cff75005c00df04830037004c
006e00700180ff58ff8eff92ffa400a500b903c8fffd000b001a00630063
00cdffee05d8ffdc002d005c0095009900df019209b500400057008000b9
039d0072009a035d0401ff67fffa00030021007700cd0004004d00cd01c0
022b004c006500e70118017c034305d8ffa3ffb0ffc40003001c005d0068
009a00ba013501470221055cff4dffcd0016002d00780080009900b200b6
00b600b800bd00da010c05f0ffa4fff00019002c0049007f00b400ce01c0
03fefd81fe3f000000050018002900390049006f00be00c700d0012301c1
026f050c05320540057affd4001400310055005700a700b400e601f7027e
027e027f03c60446ff42000e0085009100bf00c200c500e1011a012f014f
01560229026f029e03720008002c00310031006400690089009800c700de
012b01b6020c02cf03a304ab04fb061dfee0ff0e00060026009b009d00c1
010d011801200173018201d601e30243025f029b02e2039404a904d20761
001c005e006d008d00ab00f7011201380151015b0168017c018701910199
01cd01d001e802410254026b02ef0368037103bd04420442045304730483
0586058b06e8fe58fec4fed1fef7ff32ff860051007c008100910095009e
00b400b900cf00d900d900df00e20105010b010e010e012001210155017b
017b017e018d01a201a801a901b401d001d001e201e901f201f501fb0200
02000206021b0221022202220223027202770294029c02cf02cf02d002ec
02f903170322032b0335033c0359036f037103870390039003b503e1041a
04cf04ff053205320596059f05a805ab05c205f0060c0782080008ccfca3
fd2afddefe00fe88fe96feb2feb4ffe100150019001a001c001f003c0051
00610061006a0078009600a500af00d3010c0118011a012a013e014c0151
015f016a0171017801820184019a01a501a801a901ae01bc01cd01d701ef
0200020d021c02210222022e02350242024f024f025e0265027102900292
02b402d602fa0307030b030f0315032a0347035d036503740379039603b0
03cc03dd03e203f603fc03fc03ff040a041f04220426042b0447045f0475
049e04e704e7055c05cb05e5060a066d068606b806f10736073e07500751
075d078f07b607d4086000b600c300b500b7000000000000000000000000
01e00381034503b5008e0233041902ce02ce002d005f0064034d023f0000
02a80188027d01b402240578063b023b014e00f00426029402c6029f02f6
023b034d014b0153006a0231000000000000061404aa0000003c04c300ed
04bc026502ce03b50078060c017e02ef060c00b201000239000001c50330
042b03cb00da03df010704a100db040a011701ed02a70350010b01bd043e
05580021039c00ae0371017d00b5024500000afb088c012b014e01aa0087
0054013201f803ff0003024e00b4003703e30083006b02d800ed00770088
009701640467008e0033017c00e700a6029e0329056e062a061501c90269
048a021301b4000204a9000002390124010305140084015d039a06ef02d9
007500cf040a00de03ac04bc02cf02ae034d04f005520168006d007d0086
0071ff810079055804d2016700030156002504e00094007c033204210094
007f0072005c002f00b6001800ba00b80041034d00720018001f004c016a
01550099009a009a009800b200040078006900140057006e00ce00b40654
02b80067050e016500e7000004cbfe52005affa60099ff67006eff92002d
ffd40087ff7c00b800a800e5008f00a80185fe7b0070001e00d900de014c
054602cf0546ff2d028a02d90253029600b7000000000000000000000000
00000125011800ea00ea00ae0000003e05bb008a04d70053003fff8cffd5
00150028002200990062004a00e4006d00ee00e5004803c00033fe4e02b1
ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a507050061
072b00ed04b001d200b6007b00650252ff740365fe690094008f005c0040
00860075008900894043555441403f3e3d3c3b3a3938373534333231302f
2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514131211
100f0e0d0c0b0a090807060504030201002c4523466020b02660b0042623
48482d2c452346236120b02661b004262348482d2c45234660b0206120b0
4660b004262348482d2c4523462361b0206020b02661b02061b004262348
482d2c45234660b0406120b06660b004262348482d2c4523462361b04060
20b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd44
2320b8015a51582320b08d44235920b0ed51582320b04d44235920b09051
582320b00d44235921212d2c20204518684420b001602045b04676688a45
60442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370
b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b01923
442d2c2045b00325456164b050515845441b2121592d2cb00143632362b0
002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069
b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d
2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0124358
8745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0a0
5158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0022546
608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b00325
45b019234445b01a23444565234520b00325606a20b009234223688a6a60
6120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b23
5961441cb114008a5279b31940201945208a54582321b03f1b235961442d
2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c
0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b52
5845441b2121592d2c0120b003252349b04060b0206320b000525823b002
253823b002256538008a63381b212121212159012d2c4bb06451584569b0
0943608a103a1b212121592d2c01b005251023208af500b0016023edec2d
2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d2c
20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a
2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8022323701020b8
02234520b0005058b00161593a2f182d2c21210c6423648bb84000622d2c
21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c051
580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb84000
626023212d2cb4000100000015b00826b00826b00826b008260f10161345
683ab001162d2cb4000100000015b00826b00826b00826b008260f101613
4568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b5458
20458a60441b2121592d2c4b53234b515a58381b2121592d2c4b5458381b
2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b01243
5c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164b8
07085158b00425b00425012046b01060482046b0106048590a21211b2121
592d2cb012435c580cb00425b00425060c6423646164b807085158b00425
b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b53
234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c
4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b54
5a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549b00425
b00425496120b0005458212043b0005558b00325b00325b8ffc038b8ffc0
38591bb04054582043b0005458b00225b8ffc038591b2043b0005458b003
25b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121212d2c
462346608a8a462320468a608a61b8ff8062232010238ab902c202c28a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b94000020063b80400885458b2024002
43604259595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d00000001000000050f5c93baa7385f0f3cf5081b080000000000
a2e3272a00000000c59b6257faaffd671000080c00000009000100000000
000000010000073efe4e00431000faaffa7a100000010000000000000000
000000000000000206000100080000ef0000001500490000000100000002
00f2003c009d000700020010002f0056000004ac041d0005000200000001
00120001000000000006000e00004557415545592b417269616c4d54b900
540328b326181fd0bc032900e0032900020329b22b1d1fb90327031db23b
1f40b80323b31215320f412d03200001002f0320000100200320006f0320
00af032000bf03200004005f031e00010010031e007f031e0080031e00af
031e00bf031e00d0031e00060000031e0010031e0020031e006f031e009f
031e00e0031e0006031d031cb2201f1041270319007f03190002000f0317
00ef031700ff03170003001f0317002f0317004f0317005f0317008f0317
009f03170006000f0317005f0317006f0317007f031700bf031700f00317
000600400317b2923340b80317b28b3340b80317b36a6c3240b80317b261
3340b80317b35c5d3240b80317b357593240b80317b34d513240b80317b3
44493240b80317b23a3340b80317b331343240b80317b32e423240b80317
b3272c3240b80317b312253280b80317b30a0d32c04116031600d0031600
0200700316000102c4000f0101001f00a0031500b0031500020306000f01
01001f00400312b32426329fbf03040001030203010064001fffc00301b2
0d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f
414a02e200af02e200bf02e2000302e202e202e102e1007f02e000010010
02e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df
02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd
00ef02dd000702dd02dd001002dc0001000002dc0001001002dc003f02dc
000202dc02dc001002db000102db02db000f02da000102da02daffc002d3
b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b
32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb032200
3e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002d400b0
02d40002000002d4001002d4002002d4005002d4006002d4007002d40006
006002d6007002d6008002d6009002d600a002d600b002d60006000002d6
001002d6002002ca002002cc002002d6003002d6004002d6005002d60008
02d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c8001700
1f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b2
1e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1b32412
1fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f
02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e90800001f
02a600a20800406a1f4026434932402043493240263a3d3240203a3d329f
209f26024026969932402096993240268e923240208e92324026848c3240
20848c3240267a813240207a813240266c763240206c76324026646a3240
20646a3240265a5f3240205a5f3240264f543240204f5432b8029eb72427
1f374f6b0120410f02770030027700400277005002770004027702770277
00f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180
a201806501807e01808101803c01805e01802b01801c01801e0180400180
bb0138000100800140b40180400180bb013800010080013940180180ca01
80ad018073018026018025018024018020013740b80221b2493340b80221
b2453340b80221b341423240b80221b33d3e320f410f0221003f0221007f
0221000300bf022100cf022100ff0221000300400221b320223240b80221
b3191e3240b80222b32a3f3240b80221b32e3a326f414802c3007f02c300
8f02c300df02c30004002f02c3006002c300cf02c30003000f02c3003f02
c3005f02c300c002c300ef02c300ff02c3000600df02220001008f022200
01000f0222002f0222003f0222005f0222007f022200ef0222000600bf02
2100ef02210002006f0221007f022100af02210003002f0221003f022100
4f0221000302c302c30222022202210221401d101c102b1048038f1c010f
1e014f1eff1e023700161600000012110811b8010db6f70df8f70d000941
09028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226bb1f
41150197001e0401001f013900260125001f013800730401001f0135001c
0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e001e
0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51cb802
abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61fb91c
381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b1cb8
0401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f441c62
1f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301cbb1f
2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b80168
402c07960758074f07360732072c0721071f071d071b071408120810080e
080c080a080808060804080208000814b8ffe0402b000001001406100000
010006040000010004100000010010020000010002000000010000020108
02004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a515a
b005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b58b1
01018e59b0382bb00288b801005458b801ffb101018e851bb0124358b900
010111858d1bb900010128858d5959001816763f183f123e113946443e11
3946443e113946443e113946443e11394660443e11394660442b2b2b2b2b
2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa1d59
b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f04544
5958b9033e01f2455258b901f2033e4459594bb8015653205c58b9002001
f14544b9002601f145445958b9081e0020455258b90020081e4459594bb8
019a53205c58b9002501f24544b9002401f245445958b909090025455258
b9002509094459594bb8040153205c58b173244544b1242445445958b917
200073455258b9007317204459594bb8040153205c58b1ca254544b12525
45445958b9168000ca455258b900ca16804459594bb03e53205c58b11c1c
4544b11e1c45445958b9011a001c455258b9001c011a4459594bb0565320
5c58b11c1c4544b12f1c45445958b90189001c455258b9001c0189445959
4bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258b900
1c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c456523
456023456560234560b08b766818b080622020b163594565234520b00326
6062636820b003266165b059236544b063234420b13b5c4565234520b003
266062636820b003266165b05c236544b03b2344b1005c455458b15c4065
44b23b403b4523614459b347503437456523456023456560234560b08976
6818b080622020b134504565234520b003266062636820b003266165b050
236544b034234420b147374565234520b003266062636820b003266165b0
37236544b0472344b10037455458b137406544b24740474523614459004b
5342014b5058b108004259435c58b108004259b3020b0a124358601b2159
421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d
2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b0
124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b7475
737500184569444569444569447373737374757374752b2b2b2b74752b2b
2b2b2b737373737373737373737373737373737373737373737373732b2b
2b45b0406144737400004bb02a534bb03f515a58b1070745b04060445900
4bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a
58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc06044
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58
b9008002bbb301401e017400735903b01e4b5402b0124b545ab012435c5a
58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373
732b2b2b2b2b002b2b2b2b2b2b0045694473456944734569447374754569
44734569444569444569447374456944456944732b2b2b2b2b732b002b73
2b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b
2b742b2b000000>
[147 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 42 1 <000300ef0000071200cd00030007000b003c401206050201040a3c080807
070404030a0a3c09b80119b2073c05b80119b7033c00cb0cd9f5182b10f6
fdf6fdf6fd003f3c103c103c10ed17323130333533152135331521353315
efcd01decd01ddcecdcdcdcdcdcd>RJOBAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>RJOBAA+ArialMT AddT42Char 
RJOBAA+ArialMT /CharStrings get begin
/elipsis 1 def
end
RJOBAA+ArialMT /Encoding get
dup 33 /elipsis put
pop
end
%ADOEndSubsetFont
/GSVBEB+ArialMT /RJOBAA+ArialMT findfont ct_VMDictPut/GSVBEB+ArialMT*1 [33{/.notdef}rp /elipsis 222{/.notdef}rp]GSVBEB+ArialMT nfGSVBEB+ArialMT*1 [16 0 0 -16 0 0 ]msf465.314 384.355 mo(!)shGSVBDY+ArialMT*1 [16 0 0 -16 0 0 ]msf481.314 384.355 mo( + U)[4.44479 9.34399 4.44482 0 ]xshGSVBDY+ArialMT*1 [10.6667 0 0 -10.6667 0 0 ]msf511.103 388.355 mo(N)shGSVBDY+ArialMT*1 [16 0 0 -16 0 0 ]msf518.806 384.355 mo(\(x*,p*\)  )[5.32788 8 6.22736 4.44476 8.89923 6.22729 5.32788 4.44482 0 ]xsh2 lw
[] 0 dsh
46.6623 155.475 mo
46.6623 33.2098 li
@
46.6623 31.2252 mo
42.2985 38.706 li
42.0202 39.183 42.1814 39.7953 42.6584 40.0736 cv
43.1355 40.3519 43.7478 40.1908 44.0261 39.7137 cv
46.6623 35.1945 li
49.2985 39.7137 li
49.5768 40.1908 50.1891 40.3519 50.6662 40.0736 cv
51.1432 39.7953 51.3043 39.183 51.0261 38.706 cv
cp
ef
47.3102 154.921 mo
187.451 154.921 li
@
189.435 154.921 mo
181.954 159.285 li
181.477 159.563 180.865 159.402 180.587 158.925 cv
180.309 158.448 180.47 157.835 180.947 157.557 cv
185.466 154.921 li
180.947 152.285 li
180.47 152.006 180.309 151.394 180.587 150.917 cv
180.865 150.44 181.477 150.279 181.954 150.557 cv
cp
ef
%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 8508 26 <000100830000013705ba000300e3b605360b0b025505b8ffc0b337383405
b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ffc0402515
17340f051f059f05df05044f05df05f005031f0570058005ff0504010000
0a0203250100b8ffc0b337383400b8ffc040153335349f0001c000f00002
00002000d000e0000400b8fff8b41010025500b8fffa401d0e0e02550004
0c0c0255000a0b0b025500140b0b065500081010065500b8fffeb40d0d06
5500b8ffffb40c0c065500b8fffc400a0c0c0655004e044750182b10f62b
2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b2b2b2b2b
2b3311331183b405bafa4600>GSVBDY+ArialMT AddT42Char 
1 14258 37 <00010021fe5103ee0426001a01f7b10202435458401d0a140f030b031c19
0f12060b061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a
1910dd1a18cd003f3f3fed12173931301bb30f1c010fb8ffde406d1c3928
14560faf0a03400d400f020f202830341020283034070c0912160d181227
0b270c270d360c360d350e99110b28122813481659125913591569126913
69157906760d79117a147a15850d8a118c128c138914980aa80bbc10bb11
ba14ea0ae714f50dfd10f914ff1c1e12b106024354584016130b1c1b040f
440f840f030f190b031c190f12060b06003f3f3fed1112395d0111123939
1b40370f0f0c101112120a00031914131325120a1412120a0f0c0f110c25
0b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021cb802
3fb50f1340124014b80254400b3f124012025f12bf120212b80142b60f01
2200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020cb801
42b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a1910
ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c103c
87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c44bb0
0e534bb018515a58bb000cffe8000bffe80138385959313001435c58b900
14ffdeb637390a2237390eb8ffe8b51539112215392b2b2b2b595d712b2b
00715d2b015d591327163332363736373637013313161736371333010607
060623227f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c412430
7c5634fe67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300
>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/l 26 def
/y 37 def
end
GSVBDY+ArialMT /Encoding get
dup 108 /l put
dup 121 /y put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /comma /hyphen 3{/.notdef}rp /one 11{/.notdef}rp /equal 6{/.notdef}rp /D 8{/.notdef}rp /M /N /.notdef /P 2{/.notdef}rp /S /.notdef /U /.notdef /W 9{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /x /y /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [0 -12 -12 0 0 0 ]msf39.1824 72.0213 mo(Utility )[-8.6664 -3.3336 -2.6664 -2.6664 -2.6664 -3.3336 -6 0 ]yshGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf172.501 164.601 mo(x )[6 0 ]xsh[6 2 ] 0 dsh
91.8776 74.8713 mo
91.8776 155.475 li
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 12166 34 <00010083ffe803e004260018014fb9001affc0400915173402201316340f
b8fff040331214342b1301240813160c0113160b06000a111c030b003316
251817403336341a401010025517281010025517120e0e025517b8ffec40
0b0d0d025517040c0c025517b8fff4400b0b0b065517141010065517b8ff
f8400b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c0170117
4e1ab8ffc04015343634b01af01a02701aa01ab01aff1a041a0c2509b8ff
c04010333634f0090100092009d009e0090409b8fff8b41010025509b8ff
f840110e0e025509040c0c0255090a0b0b065509b8fff640160f0f065509
020c0c065509020d0d0655094e194750182b10f62b2b2b2b2b2b2b5d712b
ed105d712bf65d712b2b2b2b2b2b2b2b2b2b2b3cfde4003fed3f3f3c3939
0111123931304379401a04100e0d0f0d0206070806080508030610040c1b
000d08111b00002b012b2a2a81005d012b2b2b2135062322262627263511
3311141716163332363635113311033f7cd55ea34f100bb40b116e51518e
3bb49cb4486d4f35730292fdb38d314751538f880239fbda>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/u 34 def
end
GSVBDY+ArialMT /Encoding get
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /comma /hyphen 3{/.notdef}rp /one 11{/.notdef}rp /equal 6{/.notdef}rp /D 8{/.notdef}rp /M /N /.notdef /P 2{/.notdef}rp /S /.notdef /U /.notdef /W 9{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /u /.notdef /w /x /y /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf76.6075 167.182 mo(x)shGSVBDY+ArialMT*1 [8 0 0 -8 0 0 ]msf82.6075 170.182 mo(1)shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf87.0567 167.182 mo(*\(p\) )[4.67049 3.99591 6.6744 3.99591 0 ]xsh78.0772 53.7244 mo(Maximize utility )[9.99592 6.67439 6 2.6664 9.99591 2.6664 6 6.67439 3.3336 6.67439 3.3336 2.6664 2.6664 2.6664 3.3336 6 0 ]xsh100.192 67.7244 mo(U)shGSVBDY+ArialMT*1 [8 0 0 -8 0 0 ]msf108.858 70.7244 mo(1)shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf113.308 67.7244 mo(\()sh117.304 67.7244 mo(x,p)[6 3.3336 0 ]xsh133.312 67.7244 mo(\) )[3.99593 0 ]xsh[] 0 dsh
46.0591 154.247 mo
58.8581 114.505 71.6572 74.7639 91.8775 74.8714 cv
112.098 74.9789 167.381 154.892 167.381 154.892 cv
.661891 .339849 .0294499 0 cmyk
@
35.9414 361.883 mo
35.9414 235.555 li
0 0 0 1 cmyk
@
35.9414 233.57 mo
31.5776 241.051 li
31.2994 241.528 31.4605 242.141 31.9375 242.419 cv
32.4146 242.697 33.0269 242.536 33.3052 242.059 cv
35.9414 237.54 li
38.5776 242.059 li
38.8559 242.536 39.4682 242.697 39.9453 242.419 cv
40.4223 242.141 40.5835 241.528 40.3052 241.051 cv
cp
ef
36.6104 361.311 mo
181.376 361.311 li
@
183.36 361.311 mo
175.88 365.674 li
175.403 365.953 174.79 365.792 174.512 365.315 cv
174.234 364.837 174.395 364.225 174.872 363.947 cv
179.391 361.311 li
174.872 358.674 li
174.395 358.396 174.234 357.784 174.512 357.307 cv
174.79 356.83 175.403 356.669 175.88 356.947 cv
cp
ef
GSVBDY+ArialMT*1 [0 -12 -12 0 0 0 ]msf28.1437 275.912 mo(Utility )[-8.66641 -3.33359 -2.66641 -2.66638 -2.6664 -3.3336 -6 0 ]yshGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf165.979 370.798 mo(x )[6 0 ]xsh[6 2 ] 0 dsh
125.677 283.558 mo
125.677 361.311 li
@
0 0 0 1 cmyk
GSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf110.539 373.463 mo(x)shGSVBDY+ArialMT*1 [8 0 0 -8 0 0 ]msf116.539 376.463 mo(N)shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf122.317 373.463 mo(*\(p\) )[4.67049 3.99591 6.67439 3.99591 0 ]xsh45.9364 266.891 mo(Maximize utility )[9.99591 6.6744 6 2.6664 9.99591 2.6664 6 6.67439 3.3336 6.67439 3.3336 2.6664 2.6664 2.6664 3.3336 6 0 ]xsh67.3876 280.891 mo(U)shGSVBDY+ArialMT*1 [8 0 0 -8 0 0 ]msf76.0536 283.891 mo(N)shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf81.8309 280.891 mo(\()sh85.827 280.891 mo(x,p)[6 3.3336 0 ]xsh101.835 280.891 mo(\) )[3.99591 0 ]xsh[] 0 dsh
35.4491 361.517 mo
45.3883 359.684 52.3941 357.852 67.4321 344.859 cv
82.4701 331.866 108.686 280.893 125.677 283.558 cv
142.668 286.223 169.378 360.85 169.378 360.85 cv
.661891 .339849 .0294499 0 cmyk
@
1 lw
171.213 215.574 mo
222.035 215.574 li
222.035 239.809 li
171.213 239.809 li
cp
0 0 0 1 cmyk
@
0 0 0 1 cmyk
GSVBDY+ArialMT*1 [14 0 0 -14 0 0 ]msf183.24 233.174 mo(D\(p\) )[10.1108 4.6619 7.7868 4.6619 0 ]xsh2 lw
[6 2 ] 0 dsh
116.774 162.488 mo
144.024 162.488 li
144.024 227.675 li
169.227 227.675 li
0 0 0 .506126 cmyk
@
171.212 227.675 mo
163.731 232.039 li
163.254 232.317 162.641 232.156 162.363 231.679 cv
162.085 231.202 162.246 230.59 162.723 230.311 cv
167.242 227.675 li
162.723 225.039 li
162.246 224.761 162.085 224.148 162.363 223.671 cv
162.641 223.194 163.254 223.033 163.731 223.311 cv
cp
ef
125.886 379.674 mo
125.886 397.674 li
196.624 397.674 li
196.624 241.794 li
@
196.624 239.809 mo
200.988 247.29 li
201.266 247.767 201.105 248.379 200.628 248.657 cv
200.151 248.936 199.538 248.774 199.26 248.297 cv
196.624 243.778 li
193.988 248.297 li
193.71 248.774 193.097 248.936 192.62 248.657 cv
192.143 248.379 191.982 247.767 192.26 247.29 cv
cp
ef
0 0 0 1 cmyk
GSVBEB+ArialMT*1 [0 -48 -48 0 0 0 ]msf109.809 229.359 mo(!)sh%ADOBeginSubsetFont: BCAQMX+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDY+ArialMT gcheck setglobal} if
1 1186 10 <0002fffd0000055905ba0007000e0167b6010e0f10025502b8fff2b40f10
025502b8fff8b40d0d065502b8fff440590c0c0655090c0c0c0655050c0c
0c06552f10301067086809601088039010c905c606c010f0100b08055901
56025010680bb010f30cf30df30e09040c040d040e030b0a090504040c0d
0e080607070c09050408060c07010000b8fff8400f0c0c02550020070c14
07070c020303b8fff840150c0c02550320040c1404040c091e0505081e06
0306b80270400900080ce94002010202ba010b0001010b40120c20006507
03525004cf04df040390040104b80101400b500cc007df0c03900c010cb8
010140100f07cf07027f0780070207930fd6d7182b10f45d7119f45d71f4
5d7118ed10ed1a1910eded00183f3c1aed3fe43c10ed3c10ed87052e2b2b
7d10c4872e182b2b7d10c401111239391139398710c4c40ec4c4870510c4
c40ec4c43130014bb00b534bb01e515a58b4040f030807bafff00000fff8
38383838590172715d2b2b2b2b2b2b230133012303210313210326270607
030233d10258ddabfd9ba1d901f19946221c3305bafa4601bcfe44025a01
96b9778d8b00>GSVBDY+ArialMT AddT42Char 
1 10938 32 <0001003fffe803b1043e00300317407b042214223a094a09442456226522
7c098e098424a613ab2cc2030d09171a1817304b2cd617051b0255020210
32010a185c085c095c0a5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426
b4270f27262427242936245a0a590b64266428742374248024930a9c0c92
28972c9530a40aa90ca327a428b326c5261628b8fff4b40d0d065522b8ff
f4b40d0d065523b8fff4b40d0d065524b8fff4b40d0d065528b8fff4b40c
0c065522b8fff4b40c0c065523b8fff4b40c0c065524b8fff4b40c0c0655
1db8ffde40121e395a0827250c0a041a202615040b2e1d1ab802aa402219
2c0b0b02551f193f194f195f19af19cf19060f191f196f19df19041f198f
190219bd02550015000002aa0001ffc040140b0b025510014001021001d0
0102000110010201b8ffc0b314163401b8ffc040100e113401012e5c1d6c
1d021d1c150704b8fff4b40b0b025504b8ffe6b41010065504b8ffe64013
0f0f0655041c2e0b1f1a011a24194013183432b8ffc0402f0f0f02551918
0f0f025519180d0d025519160c0c025519201010065519200f0f06551910
0c0c065519160d0d065519b8025bb207242ab8ffc0b51c39d02a012ab8ff
e6b40c0c02552ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab60d
0d06552a1a32b8ffc04021272a346032c032023f32803202321001010124
00180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4101006
5520b8fff440190f0f065520240f100b0b02550f160c0c02550f200d0d02
550fb8fffa40200f0f02550f0e0c0c06550f0c0d0d06550f22df00013f00
4f00020019313437182b4e10f45d714df42b2b2b2b2b2bed2b2b2b102b2b
ed724e105d712bf62b2b2b2b712b4dedf42b2b2b2b2b2b2b2b2bed72003f
ed2b2b2b3fed7112392f2b2b5d71722be410fd5d71722be4111239111239
0111121739313043794040272d1e2305142c261110121013100306220d20
1b000928071b01052d071b011e14201b00210e231b0022230d0c08290a1b
012827090a062b041b001f101d1b01002b2b103c103c2b103c103c2b012b
2b2b2b2a2b818181002b2b2b2b2b2b2b2b2b5d71015d72715d1337161633
323635342726272e02353436373636333216161707262623220615141716
1716171e02151406062322263fb20f897b7c78352593c6994f41382a9153
7dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c6b726544
3d2318253249814e4779281f2b487b6718525c5237231c1d130a2433417c
5c5a9f57ac00>GSVBDY+ArialMT AddT42Char 
GSVBDY+ArialMT /CharStrings get begin
/A 10 def
/s 32 def
end
GSVBDY+ArialMT /Encoding get
dup 65 /A put
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDY+ArialMT*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /asterisk /plus /comma /hyphen 3{/.notdef}rp /one 11{/.notdef}rp /equal 3{/.notdef}rp /A 2{/.notdef}rp /D 8{/.notdef}rp /M /N /.notdef /P 2{/.notdef}rp /S /.notdef /U /.notdef /W 9{/.notdef}rp /a /b /c /d /e /f /.notdef /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /x /y /z 85{/.notdef}rp /endash 47{/.notdef}rp]GSVBDY+ArialMT nfGSVBDY+ArialMT*1 [0 -48 -48 0 0 0 ]msf109.809 181.359 mo( )shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf58.2578 202.222 mo(Users )[8.6664 6 6.6744 3.99591 6 0 ]xsh48.751 216.222 mo(i)sh51.417 216.222 mo( = 1,)[3.3336 7.008 3.3336 6.6744 0 ]xshGSVBEB+ArialMT*1 [12 0 0 -12 0 0 ]msf75.1002 216.222 mo(!)shGSVBDY+ArialMT*1 [12 0 0 -12 0 0 ]msf87.1002 216.222 mo(,N )[3.3336 8.6664 0 ]xsh143.4 242.456 mo(Add )[8.00409 6.67439 6.67439 0 ]xsh143.4 256.456 mo(demands )[6.67439 6.67439 9.99591 6.67439 6.67441 6.67439 6 0 ]xsh1 lw
[4 3 ] 0 dsh
1.35669 1.32602 mo
241.8 1.32602 li
241.8 411 li
1.35669 411 li
cp
@
%ADOBeginSubsetFont: SMQAAA+Calibri-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal GSVBDZ+Calibri-Bold gcheck setglobal} if
1 316 2 <0001008dfffa019505140015002ab10102435558b900000294b5400a1052
055500183f3f012f1a4ded31301bb31052055500183f3f31305925140e02
23222e023511343e0233321e021501950d1e322726331e0d0d1f32262732
1e0d240a100a06060a100a04c60a100a06060a100a00>GSVBDZ+Calibri-Bold AddT42Char 
1 3060 12 <0001007efffa03d203d700320081b10102435558b12a13bb0260001e000b
025fb2001e10b8fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d
4a2a192449194c054c00183f3f3f12393f1a4ded2b2b012fd4ed10ed3931
301bb90010fff0b30b014d10b8ffe8b40c0f014c10b8014d400b402d4a2a
192449194c054c00183f3f3f12393f1a4ded2b2b31305925140e0223222e
023511342e022322060711140e0223222e023511343e0233321e02151536
3633321e021503d20c1c312425311c0c132439263062350c1d302525301d
0c0a1a291f202a170a4a99535b7d4d22220a0f0a05050a0f0a01fd414a35
1d4643fdaf0a0f0a05050a0f0a037c0a0f0a05050a0f0a6750503c678a61
>GSVBDZ+Calibri-Bold AddT42Char 
1 4236 16 <00010079ffe903cc03c60032006bb10102435558b10b27bb025e0000001f
025f400f132d49270b05194924180b0f014c24b8014db4400e4d054c0018
3f3f1a4ded2b3f1239393f012fedd4ed3931301b400e2d49270b05194924
180b0f014c24b8014db4400e4d054c00183f3f1a4ded2b3f1239393f3130
5925140e0223222e023535060623222e023511343e0233321e021511141e
023332363711343e0233321e021503cc0a19291f2129180a4a99525c7d4d
210b1d312425301d0c122539263061370b1d302525301c0c220a0f0a0505
0a0f0a6750503c68896602220a0f0a05050a0f0afe08464a351d46430251
0a0f0a05050a0f0a>GSVBDZ+Calibri-Bold AddT42Char 
1 1266 6 <00020047ffe9037603d7003300400129b10102435558b2091734b8025bb4
002727003ab80245401011031701f3170117b80c3401fc340134b8ffc040
090c0d014c34342e412ab80118401be02201037d228d2202402250226022
030f221f22020c042222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a
3db8ffe8400910014d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f
5f5e5d5d5d5f5ded1112392f2b5d71ed5d71012fedc4392f10ed32393130
1b400f031701f3170117b80c3401fc340134b8ffc040090c0d014c34342e
412ab80118401be02201037d228d2202402250226022030f221f22020c04
2222041db8ffe0400e0c0f014c1d1810014d1dfa2e4a3db8ffe840091001
4d3de4400c4d0400182f3f1a4ded2b3fed2b2b12392f5f5e5d5d5d5f5ded
1112392f2b5d71ed5d7131305925140606232226263535060623222e0235
343e02333335342e0223220e0223222e0235343e0433321e02150723220e
02151416333236370376142b2a2d2911378d56477757303d79b477571127
41303f634c33100b110b060a1c465e6f3b6995602cf7603d563619473f35
592e1f0e100707100e473b4225496c484e734b24362a3f2a141c221c0e1a
26171f241d231e132955865cda122433213840363400>GSVBDZ+Calibri-Bold AddT42Char 
1 2928 11 <0001007efffa017a05700015003fb10102435558400f0d15010b0b010b0a
010d00010b0400b80260b5400a1046054c00183f3f012f1a4ded31305f5e
5d5d5d5d1bb31046054c00183f3f31305925140e0223222e023511343e02
33321e0215017a0c1d302525301d0c0c1d302525301d0c220a0f0a05050a
0f0a05230a100b06060b100a>GSVBDZ+Calibri-Bold AddT42Char 
1 1054 5 <0001008cffe904ad0514002b0057b10102435558bc002002900000001602
93400c0a265210521b180b0f014c1bb8015cb240055600183f1a4ded2b3f
3f012fedd4ed31301b400b265210521b180b0f014c1bb8015cb240055600
183f1a4ded2b3f3f31305901140e0223222e023511343e0233321e021511
141e0233323e023511343e0233321e021504ad4688c8827ac286470c1f32
2726321e0d2647633d3e6244250c1e332626311e0c01e277bc82443d7cb9
7c03130a100a06060a100afd044d714a2526496b44030b0a100a06060a10
0a00>GSVBDZ+Calibri-Bold AddT42Char 
1 3814 15 <00010049ffe902f203d7004900e9b10102435558b90041022eb524322432
0c1bb802444022000c042e012ee4370b0a010ae71137400b014d10372037
020337113711160f3c013cb8fff0401b0b0f014c3ce4411b05294a16100c
0d014c001601100416f240054d00183f1a4ded5f5e5d2b3f123939ed2b5d
1139392f2f5f5d2b10ed5d10ed5d012fd4ed1239392f2fed31301b402004
2e012ee4370b0a010ae71137400b014d10372037020337113711160f3c01
3cb8fff0401b0b0f014c3ce4411b05294a16100c0d014c001601100416f2
40054d00183f1a4ded5f5e5d2b3f123939ed2b5d1139392f2f5f5d2b10ed
5d10ed5d31305901140e0223222e0435343e0233321e0233323e0235342e
0635343e0233321e0615140e0223222e0223220e0215141e0602f239688e
53325b4830160c04080c090b2b40553622352714253d4d514d3d25325e87
542a4f402c1308040303070c080926394b3022322010263e4f514f3e2601
1e4c744e270f1718152d2c1d231507191e1a0e1a281a1e2b201c222c405a
3f406b4c2a0c12150f0f151f171b2214071518150e1a23141f2a201c212c
4059>GSVBDZ+Calibri-Bold AddT42Char 
GSVBDZ+Calibri-Bold /CharStrings get begin
/g2 2 def
/g12 12 def
/g16 16 def
/g6 6 def
/g11 11 def
/g5 5 def
/g15 15 def
end
GSVBDZ+Calibri-Bold /Encoding get
dup 43 /g2 put
dup 44 /g12 put
dup 45 /g16 put
dup 46 /g6 put
dup 47 /g11 put
dup 48 /g5 put
dup 49 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/GSVBDZ+Calibri-Bold*1 [33{/.notdef}rp /g4 /g9 /g14 /g17 /g10 /g7 /g1 /g3 /g13 /g8 /g2 /g12 /g16 /g6 /g11 /g5 /g15 206{/.notdef}rp]GSVBDZ+Calibri-Bold nfGSVBDZ+Calibri-Bold*1 [18 0 0 -18 0 0 ]msf61.9356 22.926 mo(+,*%$%*-./'01"#1')[4.79877 9.65884 9.65885 4.42084 8.52493 4.42084 9.65884 9.65884 8.88486 4.42084 4.07877 11.7468 7.17484 9.0649 6.40073 7.17484 0 ]xshgrestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/GSVBDZ+Calibri-Bold*1 uf/GSVBDZ+Calibri-Bold uf/SMQAAA+Calibri-Bold uf/GSVBEA+Arial-BoldMT*1 uf/GSVBEA+Arial-BoldMT uf/TFWPMX+Arial-BoldMT uf/GSVBEB+ArialMT*1 uf/GSVBEB+ArialMT uf/RJOBAA+ArialMT uf/GSVBDY+ArialMT*1 uf/GSVBDY+ArialMT uf/BCAQMX+ArialMT ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
